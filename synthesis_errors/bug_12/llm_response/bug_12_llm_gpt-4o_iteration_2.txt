The error message you are encountering: `ERROR: [Synth 8-2772] type std_logic does not match with a string literal` indicates that there is a type incompatibility in the assignment of a string literal to a signal of type `std_logic`.

### The Root Cause:
In VHDL, the type `std_logic` is for single-bit signals (representing '0', '1', 'Z', etc.), whereas `std_logic_vector` is an array or vector of `std_logic` signals, capable of handling multiple bits. In your code, you have made an inappropriate assignment:

```vhdl
signal a : std_logic := "0";
```

Here, `"0"` is a string literal of type `std_logic_vector`, not directly compatible with a `std_logic` type. This causes a type mismatch error, as `std_logic` expects a character literal like '0' or '1', not a string.

### Why This Occurs:
- **VHDL Type Strictness:** VHDL is strict with data types, and an individual `std_logic` bit cannot be initialized or assigned from a string literal, which is meant for vectors.
- **Literal Types:** String literals with double quotes `"..."` are typically interpreted as vectors, thus not directly assignable to single `std_logic` variables.

### How This Can Be Fixed:
To remedy this error, ensuring that you use the correct type for `std_logic` assignments is crucial. You can correct the initial assignment for the signal `a` by using single quotes:

```vhdl
signal a : std_logic := '0';
```

Here, `'0'` is a character literal representing a single `std_logic` value, making it type-compatible with the signal `a`. This change would remove the type mismatch error because now you are assigning a `std_logic` literal to a `std_logic` signal as expected by VHDL syntax rules. 

Similarly, ensure that all `std_logic_vector` and `std_logic` signals throughout your design are correctly handled with regards to data type and initial assignments.
