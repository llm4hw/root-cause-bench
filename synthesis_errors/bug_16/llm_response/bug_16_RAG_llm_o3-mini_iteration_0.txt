The problem is that out1 is being updated with a blocking assignment (using “=” instead of “<=”) in a sequential, clocked process and is not being assigned in a fully consistent way across all branches of the reset/clocked logic. In a sequential always block with asynchronous reset, every register should be updated with nonblocking assignments so that the synthesis tool can properly infer the register with its reset. In your code, you update data with nonblocking assignment in the reset branch but then use a blocking assignment for both data (in the else branch) and out1. Because out1 is assigned outside of the reset branch (and with the wrong assignment operator), the synthesis tool has trouble extracting a proper asynchronous reset for the out1 register.

To fix the bug, update all register assignments using the nonblocking assignment operator (<=) and assign the reset value for out1 in the reset branch. For example, you can rewrite the always block as follows:

-------------------------------------------------
always @(posedge clk or posedge rst)
begin
    if (rst) begin
        data <= 1'b0;
        out1 <= 1'b0;
    end
    else begin
        data <= ~data;
        out1 <= data;
    end
end
-------------------------------------------------

This ensures that out1 is correctly updated synchronously (and reset synchronously as intended) and prevents the synthesis error regarding asynchronous set/reset extraction.

🔍 Related Documents:

- source_documents\verilog_2001_ref_guide.pdf: for (i=0; i<=255; i=i+1)
                @(negedge clk)
                  data_bus = RAM[i];
            end
    default:$display(“illegal opcode in module %m”);
  endcase
end...

- source_documents\Quick Start Guide to Verilog.pdf: widely used in data path modeling and computer system design. Example 7.6 shows an RTL model of an
8-bit, synchronous register. This circuit has an active LOW, asynchronous reset that will cause the 8-bit
output Reg_Out to go to 0 when it is asserted. When the reset is not asserted, the output will be updated
with the 8-bit input Reg_In if the system is enabled (EN ¼ 1) and there is a rising edge on the clock. If the...

- source_documents\Quick Start Guide to Verilog.pdf: Design a Verilog model for the 16  8, asyn-
chronous, read-only memory system shown in
Fig. 10.2. The system should contain the infor-
mation provided in the memory map. Create a
test bench to simulate your model by reading
from each of the 16 unique addresses and
observing data_out to verify it contains the
information in the memory map.
Fig. 10.2
16 x 8 Asynchronous ROM Block Diagram
10.2.2
Design a Verilog model for the 16  8, synchro-
nous, read-only memory system shown in...

- source_documents\Quick Start Guide to Verilog.pdf: signal_assignment_1
signal_assignment_2
:
end
Let’s look at a simple model of how an initial block is used to model the reset line in a test bench. In
the following example, the signal “Reset_TB” is being driven into a DUT. At the beginning of the
simulation, the initial value of Reset_TB is set to a logic zero. The second assignment will take place
after a delay of 15 time units. The second assignment statement sets Reset_TB to a logic one. The...

- source_documents\verilog_fsm.pdf: Figure 5 The circuit generated by Program 17 (this is an erroneous circuit!)
Pass
Trigger
C
A
1'b0
0
1
Latch
C
Program 18 An always@( * ) block that will not generate latches
1 wire Trigger , Pass;
2 reg A, C;
3
4 always @( * ) begin
5
A = 1’b0;
6
C = 1’b1;
7
if (Trigger) begin
8
A = Pass;
9
C = Pass;
10
end
11 end
Figure 6 The circuit generated by Program 18 (this is correct!)
Pass
Trigger
C
A
1'b0
0
1
1
0
1'b1
11...

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...
