The problem is that the register driving out1 is being updated in an always block that is defined with an asynchronous reset, but its assignment is not written in a way that the synthesis tool can extract that reset for that register. In this block the designer treats different signals differently—using a non‐blocking assignment for data in the reset branch while using a blocking assignment for both data (in the else branch) and out1. As a result, out1 does not have its reset behavior explicitly defined and is updated without the proper consideration of the asynchronous reset.

In other words, because the always block is sensitive to the asynchronous reset (rst) and out1 is updated unconditionally—and with a blocking assignment—the synthesis tool cannot “see” how out1 should be reset. This inconsistency causes the tool to complain that it cannot extract an asynchronous set/reset for the register associated with out1.

The deeper issue is that mixing blocking and non‐blocking assignments in a clocked process, especially one with an asynchronous reset, leads to ambiguity in how registers are inferred. The asynchronous reset logic must be applied uniformly to all registers in the block. Since out1 is not explicitly “reset” under the if clause but is assigned outside, the synthesis tool cannot safely map out its reset condition to hardware.

The fix (which is not provided in code, as requested) involves rewriting the register updating logic so that every signal in the always block is assigned in a consistent way during both the reset and non‐reset conditions. In practice, this means that out1 should be updated using the same (non‐blocking) assignments and under the appropriate reset branch. This consistent treatment allows the synthesis tool to correctly infer the registers with asynchronous resets.

Thus, the bug is occurring because out1 is being assigned in a manner that does not clearly define its behavior under reset, and because the always block is mixing assignment styles in a context where asynchronous reset extraction is required.
