The bug is that you have written an infinite while loop inside an always block without any timing controls (i.e., no delay or clock edge), which causes the simulation to hang by iterating indefinitely. Here’s a detailed explanation:

1. Bug Description:
   • In your always @* block you have a while loop controlled by the flag variable.
   • Because flag is initialized to 1'b1 and never updated within the loop, the while condition remains true forever.
   • There is no time delay (for example, a # delay or a clock edge wait) inside the loop. In a simulation, this causes the loop to execute continuously with no break, ultimately exceeding the internal loop iteration limit (65536 in your case).

2. Why It Occurs:
   • The non-blocking assignment (<=) inside a combinational always block in this context does not introduce any time elapse.
   • Because the always block is combinational (sensitive to any change in its inputs) and the loop never “waits” (by using a delay or event control), the simulator never gets a chance to progress time. Thus, it continuously executes the while loop.
   • This induces the simulator’s loop limit to be exceeded, leading to the error message.

3. How to Fix It:
   • The core fix is to ensure that your simulation does not get stuck in an infinite loop. Consider the following changes:
     
     a) Use a clocked process instead of an always @* (combinational) process if you want a periodic change (such as generating a clock).
        • For example, if you aim to switch the signal on each clock edge, rewrite the code as:
          
          module top20(
              input wire clk,
              output reg out
          );
          
          always @(posedge clk) begin
              out <= ~out;
          end
          
          endmodule
     
     b) If you need to use a while loop for some reason, then include a delay or a proper condition that eventually becomes false. For example:
            
            always @* begin
               while (flag) begin
                   #10 out = ~out;  // introduce a delay so simulation time can progress
                   // Optionally update flag here to eventually exit the loop
                   // flag = some condition;  
               end
            end
     
   • In summary, either reframe your logic into a clock-driven process or ensure that the while loop has an exit condition and time advancement to avoid the simulator being trapped in an endless iteration.

By addressing the infinite loop without delay, you stop the simulation from hanging and eliminate the loop limit error.

🔍 Related Documents:

- source_documents\Quick Start Guide to Verilog.pdf: provide a time step event or delay within a forever loop or it will cause a simulation to hang. The following
is the syntax for a forever loop in Verilog.
forever
begin
statement_1
statement_2
:
statement_n
end
Consider the following example of a forever loop that generates a clock signal (CLK) with a period of
10 time units. In this example, the forever loop is embedded within an initial block. This allows the initial...

- source_documents\Quick Start Guide to Verilog.pdf: 16 times total. For loops allow the loop variable to be used in signal assignments within the block.
Example:
initial
begin
for (i¼0; i<15; i¼i+1)
#10 Count ¼ i;
end
5.2.8 disable
Verilog provides the ability to stop a loop using the keyword disable. The disable function only works
on named statement groups. The disable function is typically used after a certain ﬁxed amount of time or
within a conditional construct such as an if-else or case statement that is triggered by a control signal....

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\verilog_2001_ref_guide.pdf: for (i=0; i<=255; i=i+1)
                @(negedge clk)
                  data_bus = RAM[i];
            end
    default:$display(“illegal opcode in module %m”);
  endcase
end...

- source_documents\Quick Start Guide to Verilog.pdf: Consider the following forever loop example that will generate a clock signal (CLK), but only when an
enable (EN) is asserted. When EN ¼ 0, the loop will disable and the simulation will end.
Example:
initial
begin
CLK ¼ 0;
forever
begin: loop_ex
if (EN ¼¼ 1)
#10 CLK ¼ ~CLK;
else
disable loop_ex; // The group name to be disabled comes after the keyword
end
end
CONCEPT CHECK
CC5.2
When using an if-else statement to model a combinational logic circuit, is using the else...

- source_documents\Quick Start Guide to Verilog.pdf: The general topology and module deﬁnition for
the design are shown in Example 4.8. Design a
Verilog test bench to exhaustively verify this
design under all input conditions. Your test
bench should use two nested for loops within
a procedural block to generate all of the stimu-
lus patterns automatically. Your test bench
should change the input pattern every 30 ns
in order to give sufﬁcient time for the signals to
ripple through the adder.
100
•
Chapter 6: Test Benches...
