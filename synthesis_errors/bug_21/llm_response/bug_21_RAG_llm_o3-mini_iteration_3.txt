The problem is with the reset condition written as

  if (!reset == 0) begin

Because of operator precedence, this expression is evaluated as (!reset) == 0. For example, if reset is 0 then !reset is 1, so the expression becomes (1 == 0), which is false. Conversely, if reset is 1 then !reset is 0, so (0 == 0) is true. This is the exact opposite of what you intend for an asynchronous, active‐low reset.

Look at the always block:

  always @(posedge clk or negedge reset) begin
   if (!reset == 0) begin
    led <= 1'b0;
    …
   end else begin
    led <= 1'b1;
    …
   end
  end

Because you have a sensitivity list with negedge reset, the intent is to treat reset as active low (i.e. reset = 0 means “active”). In that case, your reset condition should simply be written as

  if (!reset) begin

or equivalently

  if (reset == 0) begin

This tells the synthesizer and simulation tools that when reset is 0 (i.e. low) the appropriate branch (here, setting led to 0) will execute. The error message arises because the mismatched condition (!reset == 0) does not align with the negative edge of reset listed in the sensitivity list.

To fix the bug, change the condition to one of the following correct forms:

  if (!reset) begin
   // reset is active (logic low)
   ...
  end

or

  if (reset == 0) begin
   ...
  end

This modification ensures that when reset is driven low (as indicated by the negedge in the sensitivity list), the reset branch is executed as expected during both simulation and synthesis.

🔍 Related Documents:

- source_documents\Quick Start Guide to Verilog.pdf: signal_assignment_1
signal_assignment_2
:
end
Let’s look at a simple model of how an initial block is used to model the reset line in a test bench. In
the following example, the signal “Reset_TB” is being driven into a DUT. At the beginning of the
simulation, the initial value of Reset_TB is set to a logic zero. The second assignment will take place
after a delay of 15 time units. The second assignment statement sets Reset_TB to a logic one. The...

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\Quick Start Guide to Verilog.pdf: reset condition. Both the Clock and Reset signals are listed in the sensitivity list. Within the block, an
if-else statement is used to handle both the reset and increment behaviors. Example 9.1 shows the
Verilog model and simulation waveform for this counter. When the counter reaches its maximum value of
“1111,” it rolls over to “0000” and continues counting because it is declared to only contain 4-bits.
Example 9.1
Binary counter using a single procedural block in Verilog...

- source_documents\verilog_fsm.pdf: Figure 5 The circuit generated by Program 17 (this is an erroneous circuit!)
Pass
Trigger
C
A
1'b0
0
1
Latch
C
Program 18 An always@( * ) block that will not generate latches
1 wire Trigger , Pass;
2 reg A, C;
3
4 always @( * ) begin
5
A = 1’b0;
6
C = 1’b1;
7
if (Trigger) begin
8
A = Pass;
9
C = Pass;
10
end
11 end
Figure 6 The circuit generated by Program 18 (this is correct!)
Pass
Trigger
C
A
1'b0
0
1
1
0
1'b1
11...

- source_documents\Quick Start Guide to Verilog.pdf: Consider the following forever loop example that will generate a clock signal (CLK), but only when an
enable (EN) is asserted. When EN ¼ 0, the loop will disable and the simulation will end.
Example:
initial
begin
CLK ¼ 0;
forever
begin: loop_ex
if (EN ¼¼ 1)
#10 CLK ¼ ~CLK;
else
disable loop_ex; // The group name to be disabled comes after the keyword
end
end
CONCEPT CHECK
CC5.2
When using an if-else statement to model a combinational logic circuit, is using the else...

- source_documents\Quick Start Guide to Verilog.pdf: are used.
always @ (posedge clock or negedge reset)
begin: STATE_MEMORY
if (!reset)
current_state <¼ S_FETCH_0;
else
current_state <¼ next_state;
end
168
•
Chapter 11: Computer System Design...
