The bug is in the if‐condition:

  if (!reset == 0) begin

This expression is ambiguous and does not match the edge sensitivity of reset used in the event control. The error arises because you are inverting reset and then comparing it to 0 (i.e. if((!reset)==0)), which confuses the synthesis/simulation tool. With reset in the sensitivity list (using negedge) you should directly check the reset value.

In other words, if reset is active low, you intend that when reset is 0 all registers (here led) are set to a defined value. The proper way to do that is to write the condition as either:

  if (reset == 1’b0) begin

or simply:

  if (!reset) begin

By removing the unnecessary “== 0” after the inversion, the condition correctly reflects that on a negedge reset (i.e. when reset is 0) the led is set to 0. This matches the event control (posedge clk or negedge reset) and resolves the error.

So, to fix the issue, change the if‐statement to:

  if (!reset) begin
    led <= 1'b0;
  end else begin
    led <= 1'b1;
  end

This correction makes the reset condition clear and consistent with the event sensitivity list, resolving the error.

🔍 Related Documents:

- source_documents\Quick Start Guide to Verilog.pdf: signal_assignment_1
signal_assignment_2
:
end
Let’s look at a simple model of how an initial block is used to model the reset line in a test bench. In
the following example, the signal “Reset_TB” is being driven into a DUT. At the beginning of the
simulation, the initial value of Reset_TB is set to a logic zero. The second assignment will take place
after a delay of 15 time units. The second assignment statement sets Reset_TB to a logic one. The...

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\Quick Start Guide to Verilog.pdf: reset condition. Both the Clock and Reset signals are listed in the sensitivity list. Within the block, an
if-else statement is used to handle both the reset and increment behaviors. Example 9.1 shows the
Verilog model and simulation waveform for this counter. When the counter reaches its maximum value of
“1111,” it rolls over to “0000” and continues counting because it is declared to only contain 4-bits.
Example 9.1
Binary counter using a single procedural block in Verilog...

- source_documents\verilog_fsm.pdf: Figure 5 The circuit generated by Program 17 (this is an erroneous circuit!)
Pass
Trigger
C
A
1'b0
0
1
Latch
C
Program 18 An always@( * ) block that will not generate latches
1 wire Trigger , Pass;
2 reg A, C;
3
4 always @( * ) begin
5
A = 1’b0;
6
C = 1’b1;
7
if (Trigger) begin
8
A = Pass;
9
C = Pass;
10
end
11 end
Figure 6 The circuit generated by Program 18 (this is correct!)
Pass
Trigger
C
A
1'b0
0
1
1
0
1'b1
11...

- source_documents\Quick Start Guide to Verilog.pdf: Consider the following forever loop example that will generate a clock signal (CLK), but only when an
enable (EN) is asserted. When EN ¼ 0, the loop will disable and the simulation will end.
Example:
initial
begin
CLK ¼ 0;
forever
begin: loop_ex
if (EN ¼¼ 1)
#10 CLK ¼ ~CLK;
else
disable loop_ex; // The group name to be disabled comes after the keyword
end
end
CONCEPT CHECK
CC5.2
When using an if-else statement to model a combinational logic circuit, is using the else...

- source_documents\Quick Start Guide to Verilog.pdf: are used.
always @ (posedge clock or negedge reset)
begin: STATE_MEMORY
if (!reset)
current_state <¼ S_FETCH_0;
else
current_state <¼ next_state;
end
168
•
Chapter 11: Computer System Design...
