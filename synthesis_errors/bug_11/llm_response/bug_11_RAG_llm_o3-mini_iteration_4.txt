The bug is that the case statement does not cover the "11" value of the 2‐bit input sel. In VHDL, a case statement over an enumerated type (or any type) must be “complete” which means it must account for every possible value—either by listing them all or by including a "when others" clause. In your code, you only provided when clauses for "00", "01", and "10", so when sel is "11" the simulation (or synthesis) produces an error, as indicated by the missing choice error message.

To fix the issue, you can add a clause for "11" or use a default "when others" clause to handle any unspecified inputs. For example:

Option 1—Explicitly list "11":

  case sel is  
    when "00" =>  
      out1 <= '1';  
    when "01" =>  
      out1 <= '0';  
    when "10" =>  
      out1 <= '0';  
    when "11" =>  
      out1 <= 'X';   -- or whatever behavior is needed  
  end case;

Option 2—Use a default clause with "when others":

  case sel is  
    when "00" =>  
      out1 <= '1';  
    when "01" =>  
      out1 <= '0';  
    when "10" =>  
      out1 <= '0';  
    when others =>  
      out1 <= '0';   -- or appropriate default behavior  
  end case;

By ensuring that all possible input combinations are handled, the error will be resolved.

🔍 Related Documents:

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\Quick Start Guide to Verilog.pdf: case statement. Declare the module to match
the block diagram provided. Use the type wire
for the inputs and type reg for the output.
5.2.7
Design a Verilog model to implement the
behavior described by the 4-input truth table
in Fig. 5.4. Use procedural assignment and an
if-else statement. Declare the module to match
the block diagram provided. Use the type wire
for the inputs and type reg for the output. Hint:
Notice that there are far more input codes pro-...

- source_documents\verilog_fsm.pdf: 48 always@( * ) begin
49
Status = 3’b000;
50
case (CurrentState)
51
STATE_2: begin
52
Status = 3’b010;
53
end
54
STATE_3: begin
55
Status = 3’b011;
56
end
57
endcase
58 end
59 //
--------------------------------------------------------------------
15...

- source_documents\RTL error analysis.pdf: case(state)
S0:             y_out = 0; 
S1,S2,S3:   y_out = ~x_in;
endcase
endmodule
HDL model for state diagram...

- source_documents\Quick Start Guide to Verilog.pdf: always @ (A, B, ALU_Sel)
begin
case (ALU_Sel)
3’b000
: begin //-- Addition
//-- Sum and Carry Flag
{NZVC[0], Result} ¼ A + B;
//-- Negative Flag
NZVC[3] ¼ Result[7];
//-- Zero Flag
if (Result ¼¼ 0)
NZVC[2] ¼ 1;
else
NZVC[2] ¼ 0;
//-- Two’s Comp Overflow Flag
if ( ((A[7]¼¼0) && (B[7]¼¼0) && (Result[7] ¼¼ 1)) ||
((A[7]¼¼1) && (B[7]¼¼1) && (Result[7] ¼¼ 0)) )
NZVC[1] ¼ 1;
else
NZVC[1] ¼ 0;
end
:
//-- other ALU operations go here...
:
default
: begin
Result ¼ 8’hXX;
NZVC
¼ 4’hX;
end
endcase
end...

- source_documents\verilog_fsm.pdf: 20
// Place -holder
transitions
21
//
---------------------------------------
22
STATE_5_PlaceHolder : begin
23
NextState = STATE_Initial ;
24
end
25
STATE_6_PlaceHolder : begin
26
NextState = STATE_Initial ;
27
end
28
STATE_7_PlaceHolder : begin
29
NextState = STATE_Initial ;
30
end
31
//
---------------------------------------
32
endcase
33 end
Line 3 speciﬁes the beginning of a Verilog case statement. For all FSMs, this case statement is of...
