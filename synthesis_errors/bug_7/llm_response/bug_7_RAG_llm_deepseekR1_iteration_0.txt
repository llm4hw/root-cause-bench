### Bug Analysis
The error occurs because the VHDL process combines two mutually exclusive triggering mechanisms:
1. **Sensitivity list** (`process(clk)`)
2. **Wait statement** (`wait for 10 ns;`)

This violates VHDL synthesis rules:
- A process **cannot** use both a sensitivity list and explicit `wait` statements
- Synthesis tools require processes to use **one consistent triggering method**

### Why This Happened
In your code:
```vhdl
process (clk)  -- Sensitivity list
begin
    if rising_edge(clk) then  -- Sequential logic
        signal1 <= not signal1;
    end if;
    wait for 10 ns;  -- Explicit timing control (illegal with sensitivity list)
end process;
```
The sensitivity list implies the process should trigger only on `clk` events, but the `wait` statement attempts to add a separate 10 ns delay trigger. This conflict causes the synthesis error.

### Solution
**Remove the `wait` statement** since it's:
1. Not synthesizable (hardware can't implement arbitrary time delays)
2. Redundant for sequential logic
3. Illegal with sensitivity lists

**Fixed Code:**
```vhdl
process (clk)
begin
    if rising_edge(clk) then  -- Trigger ONLY on clock edges
        signal1 <= not signal1;
    end if;
    -- WAIT STATEMENT REMOVED
end process;
```

### Key Points
1. **Sensitivity lists** and **wait statements** are mutually exclusive
2. **Sequential logic** should only use:
   - Sensitivity list with clock signal (`process(clk)`)
   - Edge detection (`rising_edge()` or `falling_edge()`)
3. `wait` statements are generally:
   - Only usable in testbenches
   - Never synthesizable
   - Prohibited in processes with sensitivity lists

### Additional Note
If you intended to create a clock divider (toggling every 10 ns), you should:
1. Remove the sensitivity list
2. Use a single wait statement:
```vhdl
process  -- No sensitivity list
begin
    wait until rising_edge(clk);  -- Synchronize to clock
    signal1 <= not signal1;
    wait for 10 ns;  -- Only for testbenches (not synthesizable)
end process;
```
But note: **Hardware delays require explicit counter logic**, not `wait` statements. For real hardware implementation, use a counter to divide the clock frequency instead of timing delays.

🔍 Related Documents:

- source_documents\verilog_2001_ref_guide.pdf: © Sutherland HDL, Inc.
27
   
Procedural Statement Examples
initial  // A 50 ns clock oscillator that starts after 1000 time units
  begin
    clk = 0;
    #1000 forever #25 clk = ~clk;
  end
// In this example, the sensitivity list infers sequential logic
always @(posedge clk)
  begin  // non-blocking assignments prevent race conditions in byte swap
    word[15:8]<= word[7:0];
    word[7:0] <= word[15:8];
  end
// In this example, the sensitivity list infers combinational logic...

- source_documents\verilog_2001_ref_guide.pdf: NOTE: The Verilog language does not have a true “sensitivity list”.  Instead,
the @ time control at the beginning of a procedure delays the execution of all
statements within the procedure until an edge occurs on the signals listed.
Thus, if the @ control is the first thing in the procedure, the entire procedure
appears to be sensitive to changes in the signals listed. The @ token is a time
control, however, and not a true sensitivity list.  An edge-sensitive time...

- source_documents\Quick Start Guide to Verilog.pdf: Example:
initial
begin
Clock_TB ¼ 1’b0;
end
always
begin
#10 Clock_TB ¼ ~Clock_TB;
end
5.1.1.3 Sensitivity Lists
A sensitivity list is used in conjunction with a procedural block to trigger when the assignments within
the block are executed. The symbol @ is used to indicate a sensitivity list. Signals can then be listed
within parenthesis after the @ symbol that will trigger the procedural block. The following is the base
syntax for a sensitivity list.
always @ (signal1, signal2)
begin...

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\verilog_2001_ref_guide.pdf: @* was added in Verilog-2001.
• Parenthesis are not required when there is only one signal in the list and no
edge is specified.
wait (expression) 
Delays execution of the next statement until the expression evaluates as true.
10.2 Sensitivity Lists
The sensitivity list is used at the beginning of an always procedure to infer
combinational logic or sequential logic behavior in simulation.
• always @(signal, signal, ... ) infers combinational logic if the list of...

- source_documents\Quick Start Guide to Verilog.pdf: Example 7.10
Registers as agents on a data bus—simulation waveform
CONCEPT CHECK
CC7.2
Does RTL modeling synthesize as combinational logic, sequential logic, or both? Why?
(A)
Combinational logic. Since only one process is used for each register, it will be
synthesized using basic gates.
(B)
Sequential logic. Since the sensitivity list contains clock and reset, it will
synthesize into only D-ﬂip-ﬂops.
(C)
Both. The model has a sensitivity list containing clock and reset and uses an...
