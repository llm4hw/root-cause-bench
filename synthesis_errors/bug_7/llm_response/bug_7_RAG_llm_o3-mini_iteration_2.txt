The error occurs because the process mixes two mutually exclusive triggering mechanisms in VHDL: a sensitivity list and a wait statement. In VHDL, you must choose one method to control the execution of a process. A process that has a sensitivity list is automatically triggered when an event occurs on any of the listed signals, whereas a process that uses wait statements (such as wait for 10 ns) is self-controlled and should not have an external sensitivity list.

In your code, the process header is defined as "process (clk)" (which makes it sensitive to changes in clk), and then later a "wait for 10 ns;" statement is used inside the process. This combination is illegal, leading to the synthesis error.

To fix the issue, choose one of the following approaches:

1. Remove the wait statement:
   • If you intend for the process to be triggered only by events on clk (i.e., on its rising edge), simply remove the "wait for 10 ns;" line. That way, your process correctly uses the sensitivity list without an internal wait statement.

2. Remove the sensitivity list and use only wait statements:
   • If you want to control the process using delays (for example, to introduce a specific delay in simulation), remove "clk" from the process header (or remove the sensitivity list entirely) and control the process execution with appropriate wait statements.

The simplest fix in this case is to remove the wait statement since the process is meant to be synchronous with clk. After the fix, the process will look like this:

------------------------------------------------
process (clk)
begin
    if rising_edge(clk) then
        signal1 <= not signal1;
    end if;
end process;
------------------------------------------------

This ensures that the process triggers only on clock events, and the error will be resolved.

🔍 Related Documents:

- source_documents\verilog_2001_ref_guide.pdf: © Sutherland HDL, Inc.
27
   
Procedural Statement Examples
initial  // A 50 ns clock oscillator that starts after 1000 time units
  begin
    clk = 0;
    #1000 forever #25 clk = ~clk;
  end
// In this example, the sensitivity list infers sequential logic
always @(posedge clk)
  begin  // non-blocking assignments prevent race conditions in byte swap
    word[15:8]<= word[7:0];
    word[7:0] <= word[15:8];
  end
// In this example, the sensitivity list infers combinational logic...

- source_documents\verilog_2001_ref_guide.pdf: NOTE: The Verilog language does not have a true “sensitivity list”.  Instead,
the @ time control at the beginning of a procedure delays the execution of all
statements within the procedure until an edge occurs on the signals listed.
Thus, if the @ control is the first thing in the procedure, the entire procedure
appears to be sensitive to changes in the signals listed. The @ token is a time
control, however, and not a true sensitivity list.  An edge-sensitive time...

- source_documents\Quick Start Guide to Verilog.pdf: Example:
initial
begin
Clock_TB ¼ 1’b0;
end
always
begin
#10 Clock_TB ¼ ~Clock_TB;
end
5.1.1.3 Sensitivity Lists
A sensitivity list is used in conjunction with a procedural block to trigger when the assignments within
the block are executed. The symbol @ is used to indicate a sensitivity list. Signals can then be listed
within parenthesis after the @ symbol that will trigger the procedural block. The following is the base
syntax for a sensitivity list.
always @ (signal1, signal2)
begin...

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\verilog_2001_ref_guide.pdf: @* was added in Verilog-2001.
• Parenthesis are not required when there is only one signal in the list and no
edge is specified.
wait (expression) 
Delays execution of the next statement until the expression evaluates as true.
10.2 Sensitivity Lists
The sensitivity list is used at the beginning of an always procedure to infer
combinational logic or sequential logic behavior in simulation.
• always @(signal, signal, ... ) infers combinational logic if the list of...

- source_documents\Quick Start Guide to Verilog.pdf: Example 7.10
Registers as agents on a data bus—simulation waveform
CONCEPT CHECK
CC7.2
Does RTL modeling synthesize as combinational logic, sequential logic, or both? Why?
(A)
Combinational logic. Since only one process is used for each register, it will be
synthesized using basic gates.
(B)
Sequential logic. Since the sensitivity list contains clock and reset, it will
synthesize into only D-ﬂip-ﬂops.
(C)
Both. The model has a sensitivity list containing clock and reset and uses an...
