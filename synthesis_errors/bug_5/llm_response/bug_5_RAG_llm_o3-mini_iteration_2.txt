The error occurs because VHDL does not allow you to directly index into the temporary result of the type conversion. In other words, the expression

  std_logic_vector(to_unsigned(counter, 8))(7)

tries to index the result of to_unsigned(counter, 8) immediately, but that result is an anonymous (temporary) object, and VHDL’s rules prevent you from applying an index directly to it.

To fix the issue, you need to assign the result of the conversion to an intermediate (named) signal and then index that signal. For example:

  architecture Behavioral of top5 is
   signal counter : integer range 0 to 255 := 0;
   signal conv_counter : std_logic_vector(7 downto 0);
  begin
   process (clk, rst)
   begin
    if rst = '1' then
     counter <= 0;
    elsif rising_edge(clk) then
     if counter < 255 then
      counter <= counter + 1;
     end if;
    end if; 
   end process;

   -- Assign the converted value to a signal
   conv_counter <= std_logic_vector(to_unsigned(counter, 8));

   -- Index the signal in your assignment
   out1 <= conv_counter(7);
  end Behavioral;

By doing this, you give the synthesis tool a named signal (conv_counter) that it can index properly. This fix resolves the indexing error and allows both simulation and synthesis to proceed without producing that message.

🔍 Related Documents:

- source_documents\verilog_2001_ref_guide.pdf: for (i=0; i<=255; i=i+1)
                @(negedge clk)
                  data_bus = RAM[i];
            end
    default:$display(“illegal opcode in module %m”);
  endcase
end...

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\Quick Start Guide to Verilog.pdf: EXAMPLE 8.12 2-BIT UP/DOWN COUNTER IN VERILOG—DESIGN DESCRIPTION AND PORT DEFINITION ................... ................... 123
EXAMPLE 8.13 2-BIT UP/DOWN COUNTER IN VERILOG—FULL MODEL (THREE-BLOCK APPROACH) ..................... ..................... 124
EXAMPLE 8.14 2-BIT UP/DOWN COUNTER IN VERILOG—SIMULATION WAVEFORM ................................. ................................. 124...

- source_documents\Quick Start Guide to Verilog.pdf: Example 8.11 shows the resulting simulation waveform for this design.
Example 8.11
Vending machine controller in Verilog—simulation waveform
8.2.3 2-Bit, Binary Up/Down Counter in Verilog
Let’s now look at how a simple counter can be implemented using the three-block behavioral
modeling approach in Verilog. Example 8.12 shows the design description and port deﬁnition for the
2-bit, binary up/down counter FSM from Chap. 7.
Example 8.12...

- source_documents\Quick Start Guide to Verilog.pdf: ment from 000002 to 111112 and then start
over. Use delay in your loop to update the
counter value every 10 ns. Consider using the
loop variable of the for loop to generate an
integer version of your count value, and then
assign it to the output variable of type reg[4:0].
Fig. 5.7
5-Bit Binary Counter Block Diagram
Section 5.3: System Tasks
5.3.1
Are system tasks synthesizable? Why or why
not?
5.3.2
What is the difference between the tasks $dis-
play() and $write()?
5.3.3...

- source_documents\Quick Start Guide to Verilog.pdf: ule deﬁnition. The counter should increment
from 0 to 31 and then start over. Use delay in
your loop to update the counter value every
10 ns. Consider using the loop variable of the
for loop to generate your counter value.
Fig. 5.6
Integer Counter Block Diagram
5.2.11
Design a Verilog model for a counter using a
for loop with an output type of reg[4:0].
Figure 5.7 shows the block diagram for the
module deﬁnition. The counter should incre-
ment from 000002 to 111112 and then start...
