The error comes from trying to index the result of a type‚Äêconversion expression. In this case, the expression

‚ÄÉ‚ÄÉstd_logic_vector(to_unsigned(counter, 8))

is a temporary value (a function result) that you are immediately indexing with (7). VHDL does not allow you to index directly into a temporary result of a function (or type conversion).

Because the type conversion returns an ‚Äúanonymous‚Äù aggregate, the simulator/synthesizer complains that you cannot directly index the result. (A similar issue might occur with other functions such as ‚Äúresize‚Äù or ‚Äúshift‚Äù where you try to access an element immediately after conversion.)

To fix this, you can assign the conversion result to an intermediate signal and then index that signal. For example:

------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

entity top5 is
    Port ( clk  : in STD_LOGIC;
           rst  : in STD_LOGIC;
           out1 : out STD_LOGIC);
end top5;

architecture Behavioral of top5 is
    signal counter : integer range 0 to 255 := 0;
    signal temp    : std_logic_vector(7 downto 0);  -- intermediate signal
begin
    process (clk, rst)
    begin
        if rst = '1' then
            counter <= 0;
        elsif rising_edge(clk) then
            if counter < 255 then
                counter <= counter + 1;
            else
                counter <= 0;  -- optional: wrap around or do nothing once 255 is reached
            end if;
        end if;
    end process;
    
    -- assign the conversion result to the temporary signal
    temp <= std_logic_vector(to_unsigned(counter, 8));
    -- now index the temporary signal safely
    out1 <= temp(7);
    
end Behavioral;
------------------------------------------------

In this corrected version, the result of the conversion is first stored in ‚Äútemp‚Äù and then you can safely index ‚Äútemp(7)‚Äù to drive ‚Äúout1.‚Äù

This resolves the error because the indexing operation now applies to a declared signal rather than a temporary value returned by a function call.

üîç Related Documents:

- source_documents\verilog_2001_ref_guide.pdf: for (i=0; i<=255; i=i+1)
                @(negedge clk)
                  data_bus = RAM[i];
            end
    default:$display(‚Äúillegal opcode in module %m‚Äù);
  endcase
end...

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\Quick Start Guide to Verilog.pdf: EXAMPLE 8.12 2-BIT UP/DOWN COUNTER IN VERILOG‚ÄîDESIGN DESCRIPTION AND PORT DEFINITION ................... ................... 123
EXAMPLE 8.13 2-BIT UP/DOWN COUNTER IN VERILOG‚ÄîFULL MODEL (THREE-BLOCK APPROACH) ..................... ..................... 124
EXAMPLE 8.14 2-BIT UP/DOWN COUNTER IN VERILOG‚ÄîSIMULATION WAVEFORM ................................. ................................. 124...

- source_documents\Quick Start Guide to Verilog.pdf: Example 8.11 shows the resulting simulation waveform for this design.
Example 8.11
Vending machine controller in Verilog‚Äîsimulation waveform
8.2.3 2-Bit, Binary Up/Down Counter in Verilog
Let‚Äôs now look at how a simple counter can be implemented using the three-block behavioral
modeling approach in Verilog. Example 8.12 shows the design description and port deÔ¨Ånition for the
2-bit, binary up/down counter FSM from Chap. 7.
Example 8.12...

- source_documents\Quick Start Guide to Verilog.pdf: ment from 000002 to 111112 and then start
over. Use delay in your loop to update the
counter value every 10 ns. Consider using the
loop variable of the for loop to generate an
integer version of your count value, and then
assign it to the output variable of type reg[4:0].
Fig. 5.7
5-Bit Binary Counter Block Diagram
Section 5.3: System Tasks
5.3.1
Are system tasks synthesizable? Why or why
not?
5.3.2
What is the difference between the tasks $dis-
play() and $write()?
5.3.3...

- source_documents\Quick Start Guide to Verilog.pdf: ule deÔ¨Ånition. The counter should increment
from 0 to 31 and then start over. Use delay in
your loop to update the counter value every
10 ns. Consider using the loop variable of the
for loop to generate your counter value.
Fig. 5.6
Integer Counter Block Diagram
5.2.11
Design a Verilog model for a counter using a
for loop with an output type of reg[4:0].
Figure 5.7 shows the block diagram for the
module deÔ¨Ånition. The counter should incre-
ment from 000002 to 111112 and then start...
