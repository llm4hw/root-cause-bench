The bug is that the state machine for the letter O is not actually sequencing through three dash periods. Instead, all three states (O_DASH1, O_DASH2, and O_DASH3) share the same code block that, once the counter reaches the DASH timing, resets to IDLE. As a result, only one dash period is generated instead of the three expected for “O.”

Why it’s occurring:
• The combinational branch for O_DASH1, O_DASH2, and O_DASH3 is written as a single block. In that block, when the counter reaches DASH, the state is set directly to IDLE rather than transitioning from O_DASH1 to O_DASH2, then O_DASH2 to O_DASH3, and only finally to IDLE.
• Therefore, even though the test bench selects O (using select = 2’b01 to set state to O_DASH1), the state machine completes only one dash period and resets, which does not match the expected Morse code for “O” (---).

How to fix it:
• You need to modify the state transitions within the O_dashes so that after completing O_DASH1 the state transitions to O_DASH2, after O_DASH2 to O_DASH3, and after the third dash to IDLE.
• For example, you can replace the single block handling O_DASH1, O_DASH2, and O_DASH3 with separate conditions:
  – If state is O_DASH1 and counter reaches DASH, then set state to O_DASH2 and reset the counter.
  – If state is O_DASH2 and counter reaches DASH, then set state to O_DASH3 and reset the counter.
  – If state is O_DASH3 and counter reaches DASH, then set state to IDLE and reset.
• This mirrors the approach used for the series of dots in letter S (S_DOT1, S_DOT2, S_DOT3) and ensures that the letter “O” is generated as three dashes, as intended.

Implementing this change will allow the Morse output for “O” to correctly generate three dashes and match the expectations of your test bench.

🔍 Related Documents:

- source_documents\verilog_2001_ref_guide.pdf: for (i=0; i<=255; i=i+1)
                @(negedge clk)
                  data_bus = RAM[i];
            end
    default:$display(“illegal opcode in module %m”);
  endcase
end...

- source_documents\verilog_fsm.pdf: Figure 5 The circuit generated by Program 17 (this is an erroneous circuit!)
Pass
Trigger
C
A
1'b0
0
1
Latch
C
Program 18 An always@( * ) block that will not generate latches
1 wire Trigger , Pass;
2 reg A, C;
3
4 always @( * ) begin
5
A = 1’b0;
6
C = 1’b1;
7
if (Trigger) begin
8
A = Pass;
9
C = Pass;
10
end
11 end
Figure 6 The circuit generated by Program 18 (this is correct!)
Pass
Trigger
C
A
1'b0
0
1
1
0
1'b1
11...

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\RTL error analysis.pdf: // Moore model FSM
module  Moore_Model(
output [1:0]   y_out,
input
X_in, clock, reset
);  
reg [1:0]    state;
parameter S0=2’b00, S1=2’b01,S2=2’b10,S3=2’b11;
always @ (posedge clk, negedge reset)
if (reset == 0) state <= S0;
else
case(state)
S0:   if (~X_in) state <= S1; else state <= S0;
S1:   if (X_in)   state <= S2; else state <= S3;
S2:   if (~X_in) state <= S3; else  state <= S2;
S3:   if (~X_in) state <= S0; else   state <= S3;
endcase
assign y_out = state; 
endmodule...

- source_documents\RTL error analysis.pdf: // structural model
module  Moore_Model_One(
output            y_out,A,B,
input
X_in, clock, reset
);  
wire     TA,TB;
assign  TA  = X_in&B;
assign  TB = X_in;
assign   y_out = A&B;
TFF  MA(A,TA,clock,reset);
TFF  MB(B,TB,clock,reset);
end module
// structural model
module  TFF(Q,T,CLK,RST_b);
output            Q;
input
T, CLK,RST_b;
reg
Q; 
always @ (posedge CLK, negedge RST_b)
if (RST_b == 0)  Q<= 1’b0;
else if (T)  Q <= ~Q;
end module
Structural description:
clocked sequential circuits...

- source_documents\Quick Start Guide to Verilog.pdf: case statement. Declare the module to match
the block diagram provided. Use the type wire
for the inputs and type reg for the output.
5.2.7
Design a Verilog model to implement the
behavior described by the 4-input truth table
in Fig. 5.4. Use procedural assignment and an
if-else statement. Declare the module to match
the block diagram provided. Use the type wire
for the inputs and type reg for the output. Hint:
Notice that there are far more input codes pro-...
