The problem is that the “O” case (for sending the letter O) is not actually executing three dashes as intended. In your state machine you have defined three states for O—O_DASH1, O_DASH2, and O_DASH3—but the code never actually transitions from one to the next. Instead, the same block handles all three states and, when the dash period (counter reaches DASH) is over, the state is reset immediately to IDLE. This means only one dash is produced rather than the three dashes expected for “O.”

For example, in the always block you have:

  O_DASH1, O_DASH2, O_DASH3: begin  
   morse_out <= 1;  
   if (counter < DASH) begin  
    counter <= counter + 1;  
   end else begin  
    state <= IDLE;  
    counter <= 0;  
    morse_out <= 0;  
   end  
  end

No matter which O state you are in, the “else” always resets to IDLE and never progresses to O_DASH2 or O_DASH3. This is why your test bench – which checks after the letter should have finished its transmission – finds that the “O” output was not generated correctly (it produced only one dash instead of three).

To fix the bug, you need to change the state transitions for the O case so that the design steps through three distinct dash states before returning to IDLE. For example:

  O_DASH1: begin  
   morse_out <= 1;  
   if (counter < DASH)  
    counter <= counter + 1;  
   else begin  
    counter <= 0;  
    state <= O_DASH2;  
   end  
  end  
  O_DASH2: begin  
   morse_out <= 1;  
   if (counter < DASH)  
    counter <= counter + 1;  
   else begin  
    counter <= 0;  
    state <= O_DASH3;  
   end  
  end  
  O_DASH3: begin  
   morse_out <= 1;  
   if (counter < DASH)  
    counter <= counter + 1;  
   else begin  
    counter <= 0;  
    state <= IDLE;  
    morse_out <= 0;  
   end  
  end

This change makes sure that when select = 2’b01 (for the letter O), the FSM outputs three consecutive dashes (with appropriate timing for each) before returning to the IDLE state. Once you implement these state transitions, your simulation should produce the correct Morse code for O and the test bench error will be resolved.

🔍 Related Documents:

- source_documents\verilog_2001_ref_guide.pdf: for (i=0; i<=255; i=i+1)
                @(negedge clk)
                  data_bus = RAM[i];
            end
    default:$display(“illegal opcode in module %m”);
  endcase
end...

- source_documents\verilog_fsm.pdf: Figure 5 The circuit generated by Program 17 (this is an erroneous circuit!)
Pass
Trigger
C
A
1'b0
0
1
Latch
C
Program 18 An always@( * ) block that will not generate latches
1 wire Trigger , Pass;
2 reg A, C;
3
4 always @( * ) begin
5
A = 1’b0;
6
C = 1’b1;
7
if (Trigger) begin
8
A = Pass;
9
C = Pass;
10
end
11 end
Figure 6 The circuit generated by Program 18 (this is correct!)
Pass
Trigger
C
A
1'b0
0
1
1
0
1'b1
11...

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\RTL error analysis.pdf: // Moore model FSM
module  Moore_Model(
output [1:0]   y_out,
input
X_in, clock, reset
);  
reg [1:0]    state;
parameter S0=2’b00, S1=2’b01,S2=2’b10,S3=2’b11;
always @ (posedge clk, negedge reset)
if (reset == 0) state <= S0;
else
case(state)
S0:   if (~X_in) state <= S1; else state <= S0;
S1:   if (X_in)   state <= S2; else state <= S3;
S2:   if (~X_in) state <= S3; else  state <= S2;
S3:   if (~X_in) state <= S0; else   state <= S3;
endcase
assign y_out = state; 
endmodule...

- source_documents\RTL error analysis.pdf: // structural model
module  Moore_Model_One(
output            y_out,A,B,
input
X_in, clock, reset
);  
wire     TA,TB;
assign  TA  = X_in&B;
assign  TB = X_in;
assign   y_out = A&B;
TFF  MA(A,TA,clock,reset);
TFF  MB(B,TB,clock,reset);
end module
// structural model
module  TFF(Q,T,CLK,RST_b);
output            Q;
input
T, CLK,RST_b;
reg
Q; 
always @ (posedge CLK, negedge RST_b)
if (RST_b == 0)  Q<= 1’b0;
else if (T)  Q <= ~Q;
end module
Structural description:
clocked sequential circuits...

- source_documents\Quick Start Guide to Verilog.pdf: case statement. Declare the module to match
the block diagram provided. Use the type wire
for the inputs and type reg for the output.
5.2.7
Design a Verilog model to implement the
behavior described by the 4-input truth table
in Fig. 5.4. Use procedural assignment and an
if-else statement. Declare the module to match
the block diagram provided. Use the type wire
for the inputs and type reg for the output. Hint:
Notice that there are far more input codes pro-...
