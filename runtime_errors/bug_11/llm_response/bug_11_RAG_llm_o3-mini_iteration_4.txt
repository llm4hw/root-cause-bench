The problem is that the FSM simply assigns the input (num_in) to the state and automatically sets valid to 1 for every input that comes in (unless reset is asserted). That means when you drive num_in with 10 or 15 (which are outside the expected range of 0–9), valid is still set to 1, but your test bench expects valid to be 0 (and output_data to be 0). 

In other words, the bug is that there is no check to restrict the inputs to the valid range (0–9). The FSM logic doesn’t differentiate between valid and invalid inputs; it just copies num_in to the state and unconditionally sets valid to 1.

To fix this, you need to add logic that verifies if num_in is within the range 0 to 9. One simple approach might be to change the sequential always block to something like:

-------------------------------------------------
if (reset) begin
    state <= S0;
    output_data <= 8'd0;
    valid <= 0;
end else begin
    if(num_in < 4'd10) begin
        state <= num_in;
        valid <= 1;
    end else begin
        state <= S0;  // or some defined error state
        valid <= 0;
    end
end
-------------------------------------------------

This modification ensures that if an invalid number is provided (like 10 or 15), the valid signal is set to 0 and the state (and, by extension, output_data) can be handled appropriately.

Thus, the error message "ERROR: Invalid input should not be valid." occurs because the test bench expects the FSM to mark numbers outside 0–9 as invalid, but the provided FSM incorrectly marks every number as valid. Adding the proper range check in your always block fixes the issue.

🔍 Related Documents:

- source_documents\verilog_fsm.pdf: 6
7 always@( * ) begin
8
Status = 3’b000;
9
case (CurrentState)
10
STATE_2: begin
11
Status = 3’b010;
12
end
13
STATE_3: begin
14
Status = 3’b011;
15
end
16
endcase
17 end
Alternatively, the output assignment for Status can be combined into the always@( * ) block that
chooses what the next state should be (see Program 21). It is seperated here for clarity.
4.5
A Complete FSM
In this tutorial we hasve discussed why the Moore machine FSM is useful in digital design and how...

- source_documents\verilog_fsm.pdf: Program 23 The complete FSM (part 1) from Figure 1
1 module
BasicFsm(
2
//
------------------------------------------------------------
3
// Inputs
4
//
------------------------------------------------------------
5
input
wire
Clock ,
6
input
wire
Reset ,
7
input
wire
A,
8
input
wire
B,
9
//
------------------------------------------------------------
10
11
//
------------------------------------------------------------
12
// Outputs
13
//...

- source_documents\Quick Start Guide to Verilog.pdf: 116
8.1.5 Changing the State Encoding Approach ....................................................
118
8.2 FSM DESIGN EXAMPLES ........................................................................................
119
8.2.1 Serial Bit Sequence Detector in Verilog ......................................................
119
8.2.2 Vending Machine Controller in Verilog ........................................................
121...

- source_documents\verilog_fsm.pdf: 2
STATE_1 = 3’b001 ,
3
STATE_2 = 3’b010 ,
4
STATE_3 = 3’b011 ,
5
STATE_4 = 3’b100;
As 3 bits can specify a total of 8 states (0-7), our encoding speciﬁes 3 potential states not speciﬁed
as being actual states. There are several ways of dealing with this problem:
1. Ignore it, and always press Reset as a way of initializing the FSM.
2. Specify these states, and make non-conditional transitions from them to the STATE_Initial....

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\Quick Start Guide to Verilog.pdf: appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should read in a
new input pattern every 10 ns. Your test bench
should
write
the
input
pattern
and
the
corresponding output of the DUT to an external
ﬁle called “output.txt.”
6.4.2
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.2. Your
test bench read in the input patterns from an
external ﬁle called “input.txt.” This ﬁle should...
