The root cause of the error is that the FSM never checks whether the 4‑bit input (num_in) is actually within the allowed range of 0 to 9. In your design, regardless of what value num_in has, the always block unconditionally assigns

  state <= num_in;  
  valid <= 1;

This means that when you drive num_in with a value like 10 or 15 (which are outside the range for states S0 to S9), the FSM still sets valid to 1. However, the test bench expects that for values outside 0–9, valid must be 0 and output_data should be 0.

Why Is It Occurring?
 • Since valid is always set to 1 every clock cycle (unless reset is active), the test bench’s check
  if (valid !== 0) $fatal("ERROR: Invalid input should not be valid.");
fails when num_in exceeds 9.
 • Additionally, because the state assignment is simply num_in, the FSM does not “filter” or “sanitize” invalid inputs.

How to Fix It:
Modify the sequential always block (or add a separate check) so that it verifies that num_in is in the valid range (0–9) before assigning valid = 1. For example, you can change the always block as follows:

---------------------------------------------------------------------
always @(posedge clk or posedge reset) begin
    if (reset) begin
        state       <= S0;     // Default state on reset
        output_data <= 8'd0;   // Default output
        valid       <= 0;      // Default invalid
    end else begin
        // Check if the number is valid
        if (num_in <= 4'd9) begin
            state <= num_in;
            valid <= 1;
        end else begin
            state <= S0;       // Or some default/reset state for invalid input
            valid <= 0;
        end
    end
end
---------------------------------------------------------------------

With this change, if num_in is outside 0–9 (e.g., 10 or 15), valid will be set to 0 and output_data will be generated as 0 in the combinational block. This will satisfy the test bench’s conditions and fix the error message.

In summary:
 • Bug: The FSM always marks the input as valid regardless of its value.
 • Reason: There is no check to ensure num_in is within the range 0 to 9.
 • Fix: Add a condition to verify num_in is in the allowed range before setting valid to 1 and updating the state.

🔍 Related Documents:

- source_documents\verilog_fsm.pdf: 6
7 always@( * ) begin
8
Status = 3’b000;
9
case (CurrentState)
10
STATE_2: begin
11
Status = 3’b010;
12
end
13
STATE_3: begin
14
Status = 3’b011;
15
end
16
endcase
17 end
Alternatively, the output assignment for Status can be combined into the always@( * ) block that
chooses what the next state should be (see Program 21). It is seperated here for clarity.
4.5
A Complete FSM
In this tutorial we hasve discussed why the Moore machine FSM is useful in digital design and how...

- source_documents\verilog_fsm.pdf: Program 23 The complete FSM (part 1) from Figure 1
1 module
BasicFsm(
2
//
------------------------------------------------------------
3
// Inputs
4
//
------------------------------------------------------------
5
input
wire
Clock ,
6
input
wire
Reset ,
7
input
wire
A,
8
input
wire
B,
9
//
------------------------------------------------------------
10
11
//
------------------------------------------------------------
12
// Outputs
13
//...

- source_documents\Quick Start Guide to Verilog.pdf: 116
8.1.5 Changing the State Encoding Approach ....................................................
118
8.2 FSM DESIGN EXAMPLES ........................................................................................
119
8.2.1 Serial Bit Sequence Detector in Verilog ......................................................
119
8.2.2 Vending Machine Controller in Verilog ........................................................
121...

- source_documents\verilog_fsm.pdf: 2
STATE_1 = 3’b001 ,
3
STATE_2 = 3’b010 ,
4
STATE_3 = 3’b011 ,
5
STATE_4 = 3’b100;
As 3 bits can specify a total of 8 states (0-7), our encoding speciﬁes 3 potential states not speciﬁed
as being actual states. There are several ways of dealing with this problem:
1. Ignore it, and always press Reset as a way of initializing the FSM.
2. Specify these states, and make non-conditional transitions from them to the STATE_Initial....

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\Quick Start Guide to Verilog.pdf: appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should read in a
new input pattern every 10 ns. Your test bench
should
write
the
input
pattern
and
the
corresponding output of the DUT to an external
ﬁle called “output.txt.”
6.4.2
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.2. Your
test bench read in the input patterns from an
external ﬁle called “input.txt.” This ﬁle should...
