The bug is that the `valid` signal is always set to `1` in the FSM's sequential logic, even for invalid inputs (like `num_in = 10`). 

**Why it occurs:**
In the sequential `always @(posedge clk ...)` block:
```verilog
else begin
    state <= num_in;
    valid <= 1; // <--- Always sets valid=1, regardless of num_in's validity
end
```
There is no check to ensure `num_in` is in the valid range (0-9). This causes `valid` to incorrectly stay high for invalid inputs like `10` or `15`.

**Fix:**
Modify the sequential logic to conditionally set `valid` based on `num_in`:
```verilog
else begin
    state <= num_in;
    // Check if num_in is 0-9 (valid inputs)
    valid <= (num_in >= 4'd0 && num_in <= 4'd9) ? 1'b1 : 1'b0;
end
```

**Explanation:**
- The ternary operator `? :` checks if `num_in` is between 0 and 9 (inclusive).
- If valid (`num_in` in 0-9), `valid` is set to `1`.
- If invalid (`num_in` >9), `valid` is set to `0`.

This ensures the `valid` signal behaves correctly for both valid and invalid inputs, resolving the testbench error.

üîç Related Documents:

- source_documents\verilog_fsm.pdf: 6
7 always@( * ) begin
8
Status = 3‚Äôb000;
9
case (CurrentState)
10
STATE_2: begin
11
Status = 3‚Äôb010;
12
end
13
STATE_3: begin
14
Status = 3‚Äôb011;
15
end
16
endcase
17 end
Alternatively, the output assignment for Status can be combined into the always@( * ) block that
chooses what the next state should be (see Program 21). It is seperated here for clarity.
4.5
A Complete FSM
In this tutorial we hasve discussed why the Moore machine FSM is useful in digital design and how...

- source_documents\verilog_fsm.pdf: Program 23 The complete FSM (part 1) from Figure 1
1 module
BasicFsm(
2
//
------------------------------------------------------------
3
// Inputs
4
//
------------------------------------------------------------
5
input
wire
Clock ,
6
input
wire
Reset ,
7
input
wire
A,
8
input
wire
B,
9
//
------------------------------------------------------------
10
11
//
------------------------------------------------------------
12
// Outputs
13
//...

- source_documents\Quick Start Guide to Verilog.pdf: 116
8.1.5 Changing the State Encoding Approach ....................................................
118
8.2 FSM DESIGN EXAMPLES ........................................................................................
119
8.2.1 Serial Bit Sequence Detector in Verilog ......................................................
119
8.2.2 Vending Machine Controller in Verilog ........................................................
121...

- source_documents\verilog_fsm.pdf: 2
STATE_1 = 3‚Äôb001 ,
3
STATE_2 = 3‚Äôb010 ,
4
STATE_3 = 3‚Äôb011 ,
5
STATE_4 = 3‚Äôb100;
As 3 bits can specify a total of 8 states (0-7), our encoding speciÔ¨Åes 3 potential states not speciÔ¨Åed
as being actual states. There are several ways of dealing with this problem:
1. Ignore it, and always press Reset as a way of initializing the FSM.
2. Specify these states, and make non-conditional transitions from them to the STATE_Initial....

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\Quick Start Guide to Verilog.pdf: appear in a truth table (i.e., ‚Äú0000,‚Äù ‚Äú0001,‚Äù
‚Äú0010,‚Äù . . .). Your test bench should read in a
new input pattern every 10 ns. Your test bench
should
write
the
input
pattern
and
the
corresponding output of the DUT to an external
Ô¨Åle called ‚Äúoutput.txt.‚Äù
6.4.2
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.2. Your
test bench read in the input patterns from an
external Ô¨Åle called ‚Äúinput.txt.‚Äù This Ô¨Åle should...
