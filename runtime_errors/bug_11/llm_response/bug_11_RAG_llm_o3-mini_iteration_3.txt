The bug is that the FSM never checks whether the 4‐bit input is in the valid range (0–9). In other words, regardless of whether num_in is 4'd5 or 4'd10 (or even 4'd15), the sequential always block just does

  state <= num_in;
  valid <= 1;

so even when the input is “invalid” (i.e., outside 0–9) the valid signal is still set to 1. That’s why when the test bench drives num_in = 10 or 15, the test bench’s checks for valid being 0 fail and print the error “Invalid input should not be valid.”

Why this happens:
• The code assigns state from num_in directly without checking its range.
• There is no logic that detects if num_in is greater than 9 and then sets valid to 0 (or otherwise resets the state/output_data).
• As a result, invalid num_in values are treated the same as valid ones.

How to fix it:
Modify the always block so that before updating state (and valid), you check whether num_in is in the range 0–9. For example, you could write:

  always @(posedge clk or posedge reset) begin
   if (reset) begin
    state <= S0; // Default state on reset
    output_data <= 8'd0;
    valid <= 0;
   end else begin
    if (num_in <= 4'd9) begin
     state <= num_in;
     valid <= 1;
    end else begin
     state <= S0; // Or another default state for invalid input
     valid <= 0;
    end
   end
  end

With this change, if num_in is 10 or 15 then valid will be 0 and (if desired) state (and subsequently output_data) will be set to a default “invalid” value. This fix makes the design behavior match the test bench expectations.

🔍 Related Documents:

- source_documents\verilog_fsm.pdf: 6
7 always@( * ) begin
8
Status = 3’b000;
9
case (CurrentState)
10
STATE_2: begin
11
Status = 3’b010;
12
end
13
STATE_3: begin
14
Status = 3’b011;
15
end
16
endcase
17 end
Alternatively, the output assignment for Status can be combined into the always@( * ) block that
chooses what the next state should be (see Program 21). It is seperated here for clarity.
4.5
A Complete FSM
In this tutorial we hasve discussed why the Moore machine FSM is useful in digital design and how...

- source_documents\verilog_fsm.pdf: Program 23 The complete FSM (part 1) from Figure 1
1 module
BasicFsm(
2
//
------------------------------------------------------------
3
// Inputs
4
//
------------------------------------------------------------
5
input
wire
Clock ,
6
input
wire
Reset ,
7
input
wire
A,
8
input
wire
B,
9
//
------------------------------------------------------------
10
11
//
------------------------------------------------------------
12
// Outputs
13
//...

- source_documents\Quick Start Guide to Verilog.pdf: 116
8.1.5 Changing the State Encoding Approach ....................................................
118
8.2 FSM DESIGN EXAMPLES ........................................................................................
119
8.2.1 Serial Bit Sequence Detector in Verilog ......................................................
119
8.2.2 Vending Machine Controller in Verilog ........................................................
121...

- source_documents\verilog_fsm.pdf: 2
STATE_1 = 3’b001 ,
3
STATE_2 = 3’b010 ,
4
STATE_3 = 3’b011 ,
5
STATE_4 = 3’b100;
As 3 bits can specify a total of 8 states (0-7), our encoding speciﬁes 3 potential states not speciﬁed
as being actual states. There are several ways of dealing with this problem:
1. Ignore it, and always press Reset as a way of initializing the FSM.
2. Specify these states, and make non-conditional transitions from them to the STATE_Initial....

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\Quick Start Guide to Verilog.pdf: appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should read in a
new input pattern every 10 ns. Your test bench
should
write
the
input
pattern
and
the
corresponding output of the DUT to an external
ﬁle called “output.txt.”
6.4.2
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.2. Your
test bench read in the input patterns from an
external ﬁle called “input.txt.” This ﬁle should...
