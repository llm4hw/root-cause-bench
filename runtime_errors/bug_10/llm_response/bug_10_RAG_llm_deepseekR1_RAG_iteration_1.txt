The bug arises because the shift register module uses **blocking assignments** (`=`) instead of **non-blocking assignments** (`<=`) inside the clocked `always` block. Here's the breakdown:

### **Why the Error Occurs**
1. **Blocking Assignments in Clocked Logic**:
   - In the `always @(posedge clk)` block, `data[0] = serial_in`, `data[1] = data[0]`, etc., use blocking assignments (`=`). These assignments execute **immediately and sequentially**.
   - When `shift_en` is active, all four bits (`data[0]` to `data[3]`) update in **one clock cycle**:
     - `data[0]` gets `serial_in` (e.g., `1`).
     - `data[1]` then takes the **newly updated** `data[0]` (now `1`), not the previous value.
     - This propagates to `data[2]` and `data[3]`, resulting in all bits being set to `1` in one cycle (e.g., `1111` instead of the expected `0001`).

2. **Testbench Expects Sequential Shifting**:
   - The testbench checks for `0001` after the first shift, assuming `data[0]` updates to `1` while `data[3:1]` retain their old values. This requires **non-blocking assignments** to ensure concurrent updates using the previous values.

---

### **How to Fix It**
Replace **blocking assignments** (`=`) with **non-blocking assignments** (`<=`) in the shift logic:
```verilog
always @(posedge clk or posedge reset) begin
    if (reset) begin
        data <= 4'b0000;
    end else if (shift_en) begin
        data[0] <= serial_in;  // Use <=
        data[1] <= data[0];   // Use <=
        data[2] <= data[1];   // Use <=
        data[3] <= data[2];   // Use <=
    end
end
```

### **Why This Works**
- Non-blocking assignments (`<=`) ensure all right-hand sides are evaluated **before any updates occur**. This mimics the behavior of parallel registers in a shift register, where each bit takes the value of the previous bit **from the previous clock cycle**.

### **Contextual Confirmation**
The provided context explicitly states:
> **Program 12** (correct shift register) uses `<=` assignments inside an `always@(posedge Clock)` block.  
> **Program 15** (incorrect parallel registers) uses `=` assignments, leading to incorrect behavior.

By fixing the assignments, the code now correctly models a shift register.

üîç Related Documents:

- source_documents\verilog_fsm.pdf: eÔ¨Äect on a circuit.
1. Consider the shift register from Figure 2. If you place = assignments inside of an always@(posedge
Clock) block to produce the shift register, you instead get the parallel registers shown in Figure 4
and Program 15.
You might also get one register, whose output is tied to B, C and D.
Both
possible outcomes are equivelent. These circuit make sense, but don‚Äôt create shift registers! (As...

- source_documents\verilog_fsm.pdf: shift registers are common construct, we assume that you wanted to create a shift register)
Figure 4 Parallel registers
A
Clock
B
C
D
Program 15 Parallel registers, using = assignments inside of an always@(posedge Clock) block
1 always @(posedge
Clock) begin
2
B = A;
3
C = B;
4
D = C;
5 end
2. The opposite example (shown in Program 16), where we place <= assignments inside of always@(
* ) is less pronounced. In this case, just consider what type of circuit you want to create: do you...

- source_documents\Quick Start Guide to Verilog.pdf: register is disabled (EN ¬º 0), the input clock is ignored. At all other times, the output holds its last value.
Example 7.6
RTL model of an 8-bit register in Verilog
7.2.2 Shift Registers
A shift register is a circuit which consists of multiple registers connected in series. Data is shifted
from one register to another on the rising edge of the clock. This type of circuit is often used in serial-to-...

- source_documents\verilog_2001_ref_guide.pdf: for (i=0; i<=255; i=i+1)
                @(negedge clk)
                  data_bus = RAM[i];
            end
    default:$display(‚Äúillegal opcode in module %m‚Äù);
  endcase
end...

- source_documents\verilog_fsm.pdf: Figure 2 A shift register
A
Clock
B
C
D
Program 12 A shift register, using <= assignments inside of an always@(posedge Clock) block
1 always @(posedge
Clock) begin
2
B <= A;
3
C <= B;
4
D <= C;
5 end
4.3.6
always@( * ) Blocks
always@( * ) blocks are used to describe Combinational Logic, or Logic Gates. Only = (blocking)
assignments should be used in an always@( * ) block.
Never use <= (non-blocking) assignments in...

- source_documents\Quick Start Guide to Verilog.pdf: appear in a truth table (i.e., ‚Äú0000,‚Äù ‚Äú0001,‚Äù
‚Äú0010,‚Äù . . .). Your test bench should read in a
new input pattern every 10 ns. Your test bench
should
write
the
input
pattern
and
the
corresponding output of the DUT to an external
Ô¨Åle called ‚Äúoutput.txt.‚Äù
6.4.2
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.2. Your
test bench read in the input patterns from an
external Ô¨Åle called ‚Äúinput.txt.‚Äù This Ô¨Åle should...
