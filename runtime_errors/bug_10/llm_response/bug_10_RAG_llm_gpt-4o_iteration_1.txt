The issue you're encountering stems from the code inside the always block in the `shift_register` module. Specifically, the problem is caused by the use of blocking assignments (`=`) instead of non-blocking assignments (`<=`). Here's a detailed explanation and solution:

### Root Cause:
1. **Blocking vs. Non-blocking Assignments**:
   - This line of your code inside the always block uses blocking assignments:
     ```verilog
     data[0] = serial_in;
     data[1] = data[0];
     data[2] = data[1];
     data[3] = data[2];
     ```
   - Blocking assignments evaluate and update immediately, which means each assignment operates on the updated value from the last line, disregarding the intended parallel behavior of hardware registers. As a result, only the last input to the shift register (`serial_in`) cascades through all the positions, resulting in the final output 1111 instead of 0001.

2. **Shift Register Behavior**:
   - In a true shift register implemented with non-blocking assignments, each bit should be able to independently shift its value from the previous state on the same clock edge.

### Solution:
Modify the shift register assignment lines to use non-blocking assignments (`<=`) so that all evaluations are done before updating any registers. This ensures proper sequential processing consistent with hardware behavior.

Here's the corrected code block:

```verilog
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            data <= 4'b0000; // Clear the register on reset
        end else if (shift_en) begin
            data[0] <= serial_in;
            data[1] <= data[0];
            data[2] <= data[1];
            data[3] <= data[2];
        end
    end
```

### Explanation:
- Using non-blocking assignments ensures that each bit of `data` is updated based on the previous state before the clock event, thus preserving the intended sequential flow of data shift through the register, which aligns with the shift register's behavior.

By making this change, the expected shift of serial input into your 4-bit register should work correctly, and the simulation should pass all the test bench conditions.

🔍 Related Documents:

- source_documents\verilog_fsm.pdf: eﬀect on a circuit.
1. Consider the shift register from Figure 2. If you place = assignments inside of an always@(posedge
Clock) block to produce the shift register, you instead get the parallel registers shown in Figure 4
and Program 15.
You might also get one register, whose output is tied to B, C and D.
Both
possible outcomes are equivelent. These circuit make sense, but don’t create shift registers! (As...

- source_documents\verilog_fsm.pdf: shift registers are common construct, we assume that you wanted to create a shift register)
Figure 4 Parallel registers
A
Clock
B
C
D
Program 15 Parallel registers, using = assignments inside of an always@(posedge Clock) block
1 always @(posedge
Clock) begin
2
B = A;
3
C = B;
4
D = C;
5 end
2. The opposite example (shown in Program 16), where we place <= assignments inside of always@(
* ) is less pronounced. In this case, just consider what type of circuit you want to create: do you...

- source_documents\Quick Start Guide to Verilog.pdf: register is disabled (EN ¼ 0), the input clock is ignored. At all other times, the output holds its last value.
Example 7.6
RTL model of an 8-bit register in Verilog
7.2.2 Shift Registers
A shift register is a circuit which consists of multiple registers connected in series. Data is shifted
from one register to another on the rising edge of the clock. This type of circuit is often used in serial-to-...

- source_documents\verilog_2001_ref_guide.pdf: for (i=0; i<=255; i=i+1)
                @(negedge clk)
                  data_bus = RAM[i];
            end
    default:$display(“illegal opcode in module %m”);
  endcase
end...

- source_documents\verilog_fsm.pdf: Figure 2 A shift register
A
Clock
B
C
D
Program 12 A shift register, using <= assignments inside of an always@(posedge Clock) block
1 always @(posedge
Clock) begin
2
B <= A;
3
C <= B;
4
D <= C;
5 end
4.3.6
always@( * ) Blocks
always@( * ) blocks are used to describe Combinational Logic, or Logic Gates. Only = (blocking)
assignments should be used in an always@( * ) block.
Never use <= (non-blocking) assignments in...

- source_documents\Quick Start Guide to Verilog.pdf: appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should read in a
new input pattern every 10 ns. Your test bench
should
write
the
input
pattern
and
the
corresponding output of the DUT to an external
ﬁle called “output.txt.”
6.4.2
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.2. Your
test bench read in the input patterns from an
external ﬁle called “input.txt.” This ﬁle should...
