The bug is due to the use of blocking assignments (=) in a sequential (clocked) always block. In this code, blocking assignments cause the updates to occur immediately and in order. When you update data[0] with serial_in and then use data[0] to update data[1] in the same clock cycle, the new value of data[0] is used instead of its previous value. This means that the values are ‚Äúcascaded‚Äù immediately rather than being updated concurrently as you would expect in a proper shift register.

In a clocked always block like this, you should use nonblocking assignments (<=) so that all the right-hand side expressions are evaluated first (using the old values) and then all the left-hand side signals are updated concurrently on the posedge of clk. This will correctly create the shift register behavior.

To fix the bug, modify the assignments inside the shift register always block to use nonblocking assignments. Here‚Äôs the corrected code:

--------------------------------------------------
module shift_register (
    input clk,             // Clock input
    input reset,           // Asynchronous reset
    input shift_en,        // Shift enable signal
    input serial_in,       // Serial input
    output reg [3:0] data  // 4-bit parallel output
);

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            data <= 4'b0000; // Clear the register on reset
        end else if (shift_en) begin
            data[0] <= serial_in;
            data[1] <= data[0];
            data[2] <= data[1];
            data[3] <= data[2];
        end
    end

endmodule
--------------------------------------------------

Using nonblocking assignments in a clocked block ensures that the data shift occurs simultaneously on the clock edge rather than sequentially during simulation, which fixes the incorrect outputs reported by the testbench.

üîç Related Documents:

- source_documents\verilog_fsm.pdf: eÔ¨Äect on a circuit.
1. Consider the shift register from Figure 2. If you place = assignments inside of an always@(posedge
Clock) block to produce the shift register, you instead get the parallel registers shown in Figure 4
and Program 15.
You might also get one register, whose output is tied to B, C and D.
Both
possible outcomes are equivelent. These circuit make sense, but don‚Äôt create shift registers! (As...

- source_documents\verilog_fsm.pdf: shift registers are common construct, we assume that you wanted to create a shift register)
Figure 4 Parallel registers
A
Clock
B
C
D
Program 15 Parallel registers, using = assignments inside of an always@(posedge Clock) block
1 always @(posedge
Clock) begin
2
B = A;
3
C = B;
4
D = C;
5 end
2. The opposite example (shown in Program 16), where we place <= assignments inside of always@(
* ) is less pronounced. In this case, just consider what type of circuit you want to create: do you...

- source_documents\Quick Start Guide to Verilog.pdf: register is disabled (EN ¬º 0), the input clock is ignored. At all other times, the output holds its last value.
Example 7.6
RTL model of an 8-bit register in Verilog
7.2.2 Shift Registers
A shift register is a circuit which consists of multiple registers connected in series. Data is shifted
from one register to another on the rising edge of the clock. This type of circuit is often used in serial-to-...

- source_documents\verilog_2001_ref_guide.pdf: for (i=0; i<=255; i=i+1)
                @(negedge clk)
                  data_bus = RAM[i];
            end
    default:$display(‚Äúillegal opcode in module %m‚Äù);
  endcase
end...

- source_documents\verilog_fsm.pdf: Figure 2 A shift register
A
Clock
B
C
D
Program 12 A shift register, using <= assignments inside of an always@(posedge Clock) block
1 always @(posedge
Clock) begin
2
B <= A;
3
C <= B;
4
D <= C;
5 end
4.3.6
always@( * ) Blocks
always@( * ) blocks are used to describe Combinational Logic, or Logic Gates. Only = (blocking)
assignments should be used in an always@( * ) block.
Never use <= (non-blocking) assignments in...

- source_documents\Quick Start Guide to Verilog.pdf: appear in a truth table (i.e., ‚Äú0000,‚Äù ‚Äú0001,‚Äù
‚Äú0010,‚Äù . . .). Your test bench should read in a
new input pattern every 10 ns. Your test bench
should
write
the
input
pattern
and
the
corresponding output of the DUT to an external
Ô¨Åle called ‚Äúoutput.txt.‚Äù
6.4.2
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.2. Your
test bench read in the input patterns from an
external Ô¨Åle called ‚Äúinput.txt.‚Äù This Ô¨Åle should...
