The bug in the Verilog code is due to using **blocking assignments (=)** instead of **non-blocking assignments (<=)** inside the clocked `always` block for the shift register logic. This causes all bits to update immediately in the same clock cycle, leading to incorrect parallel behavior instead of a sequential shift.

**Why it occurs:**
- Blocking assignments (=) execute sequentially and immediately. When `data[0] = serial_in` is executed, `data[0]` updates instantly. Subsequent lines `data[1] = data[0]`, `data[2] = data[1]`, etc., then use the **newly updated value** of `data[0]` (not the previous cycle's value). This results in all 4 bits (`data[3:0]`) being set to `serial_in` in one clock cycle (e.g., `1111` instead of `0001`).

**Fix:**
Replace blocking assignments (=) with non-blocking assignments (<=) in the shift logic. Non-blocking assignments ensure all right-hand sides are evaluated using their **pre-update values**, then applied simultaneously at the end of the clock cycle, creating the correct shift behavior.

**Corrected Shift Register Code:**
```verilog
always @(posedge clk or posedge reset) begin
    if (reset) begin
        data <= 4'b0000; // Non-blocking for reset (correct)
    end else if (shift_en) begin
        // Use non-blocking assignments for shift
        data[0] <= serial_in;  // <= instead of =
        data[1] <= data[0];    // <= instead of =
        data[2] <= data[1];    // <= instead of =
        data[3] <= data[2];    // <= instead of =
    end
end
```

**Explanation:**
- With non-blocking assignments, `data[1]` gets the **previous** value of `data[0]`, `data[2]` gets the **previous** value of `data[1]`, etc. This creates a proper shift register where each bit propagates to the next on the clock edge, matching the testbench's expectations.

🔍 Related Documents:

- source_documents\verilog_fsm.pdf: eﬀect on a circuit.
1. Consider the shift register from Figure 2. If you place = assignments inside of an always@(posedge
Clock) block to produce the shift register, you instead get the parallel registers shown in Figure 4
and Program 15.
You might also get one register, whose output is tied to B, C and D.
Both
possible outcomes are equivelent. These circuit make sense, but don’t create shift registers! (As...

- source_documents\verilog_fsm.pdf: shift registers are common construct, we assume that you wanted to create a shift register)
Figure 4 Parallel registers
A
Clock
B
C
D
Program 15 Parallel registers, using = assignments inside of an always@(posedge Clock) block
1 always @(posedge
Clock) begin
2
B = A;
3
C = B;
4
D = C;
5 end
2. The opposite example (shown in Program 16), where we place <= assignments inside of always@(
* ) is less pronounced. In this case, just consider what type of circuit you want to create: do you...

- source_documents\Quick Start Guide to Verilog.pdf: register is disabled (EN ¼ 0), the input clock is ignored. At all other times, the output holds its last value.
Example 7.6
RTL model of an 8-bit register in Verilog
7.2.2 Shift Registers
A shift register is a circuit which consists of multiple registers connected in series. Data is shifted
from one register to another on the rising edge of the clock. This type of circuit is often used in serial-to-...

- source_documents\verilog_2001_ref_guide.pdf: for (i=0; i<=255; i=i+1)
                @(negedge clk)
                  data_bus = RAM[i];
            end
    default:$display(“illegal opcode in module %m”);
  endcase
end...

- source_documents\verilog_fsm.pdf: Figure 2 A shift register
A
Clock
B
C
D
Program 12 A shift register, using <= assignments inside of an always@(posedge Clock) block
1 always @(posedge
Clock) begin
2
B <= A;
3
C <= B;
4
D <= C;
5 end
4.3.6
always@( * ) Blocks
always@( * ) blocks are used to describe Combinational Logic, or Logic Gates. Only = (blocking)
assignments should be used in an always@( * ) block.
Never use <= (non-blocking) assignments in...

- source_documents\Quick Start Guide to Verilog.pdf: appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should read in a
new input pattern every 10 ns. Your test bench
should
write
the
input
pattern
and
the
corresponding output of the DUT to an external
ﬁle called “output.txt.”
6.4.2
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.2. Your
test bench read in the input patterns from an
external ﬁle called “input.txt.” This ﬁle should...
