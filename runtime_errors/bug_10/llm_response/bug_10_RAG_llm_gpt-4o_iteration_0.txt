The error you're experiencing arises from the way the shift register is implemented. The immediate issue is in the use of blocking assignments (`=`) instead of non-blocking assignments (`<=`) within the always block for synchronously updating the shift register. This causes the register to incorrectly store and propagate values during each clock cycle.

**Root Cause:**
- Blocking assignments (`=`) update the variable immediately and the updated value is used for subsequent statements within the same always block. This means, when `data[0]` is updated, it immediately affects `data[1]` in the same clock edge, and similarly for `data[2]` and `data[3]`.
- This means at every positive edge of the clock when the shift is enabled, all bits are being updated to the same value (the current `serial_in`), instead of shifting the values through the register.

**Fixed Code Explanation:**
To fix this, change the blocking assignments (`=`) to non-blocking assignments (`<=`) to ensure that all updates occur together at the end of the always block execution, preserving the previous state of the registers for the entire clock cycle.

Here’s how the corrected code portion should look:

```verilog
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            data <= 4'b0000; // Clear the register on reset
        end else if (shift_en) begin
            data[0] <= serial_in;
            data[1] <= data[0];
            data[2] <= data[1];
            data[3] <= data[2];
        end
    end
```

**Explanation of Fix:**
- Using non-blocking assignments ensures that evaluation and updating occur separately, thereby preserving the original value of each `data` register stage during the same clock cycle, allowing the shift to occur correctly.
- As a result, each bit shifts into the next position only on a new clock edge, and the correct value should appear sequentially in `data`.

With these changes, your shift register should behave correctly, shifting the input serial value through the 4-bit register, and pass the testbench checks.

🔍 Related Documents:

- source_documents\verilog_fsm.pdf: eﬀect on a circuit.
1. Consider the shift register from Figure 2. If you place = assignments inside of an always@(posedge
Clock) block to produce the shift register, you instead get the parallel registers shown in Figure 4
and Program 15.
You might also get one register, whose output is tied to B, C and D.
Both
possible outcomes are equivelent. These circuit make sense, but don’t create shift registers! (As...

- source_documents\verilog_fsm.pdf: shift registers are common construct, we assume that you wanted to create a shift register)
Figure 4 Parallel registers
A
Clock
B
C
D
Program 15 Parallel registers, using = assignments inside of an always@(posedge Clock) block
1 always @(posedge
Clock) begin
2
B = A;
3
C = B;
4
D = C;
5 end
2. The opposite example (shown in Program 16), where we place <= assignments inside of always@(
* ) is less pronounced. In this case, just consider what type of circuit you want to create: do you...

- source_documents\Quick Start Guide to Verilog.pdf: register is disabled (EN ¼ 0), the input clock is ignored. At all other times, the output holds its last value.
Example 7.6
RTL model of an 8-bit register in Verilog
7.2.2 Shift Registers
A shift register is a circuit which consists of multiple registers connected in series. Data is shifted
from one register to another on the rising edge of the clock. This type of circuit is often used in serial-to-...

- source_documents\verilog_2001_ref_guide.pdf: for (i=0; i<=255; i=i+1)
                @(negedge clk)
                  data_bus = RAM[i];
            end
    default:$display(“illegal opcode in module %m”);
  endcase
end...

- source_documents\verilog_fsm.pdf: Figure 2 A shift register
A
Clock
B
C
D
Program 12 A shift register, using <= assignments inside of an always@(posedge Clock) block
1 always @(posedge
Clock) begin
2
B <= A;
3
C <= B;
4
D <= C;
5 end
4.3.6
always@( * ) Blocks
always@( * ) blocks are used to describe Combinational Logic, or Logic Gates. Only = (blocking)
assignments should be used in an always@( * ) block.
Never use <= (non-blocking) assignments in...

- source_documents\Quick Start Guide to Verilog.pdf: appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should read in a
new input pattern every 10 ns. Your test bench
should
write
the
input
pattern
and
the
corresponding output of the DUT to an external
ﬁle called “output.txt.”
6.4.2
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.2. Your
test bench read in the input patterns from an
external ﬁle called “input.txt.” This ﬁle should...
