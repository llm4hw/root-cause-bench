The bug is in the way the logic for p1y is written. Instead of checking whether all three inputs in one group are 1 and then outputting a 1, the code concatenates three 1‐bit signals into a 3­-bit vector and then performs a bitwise AND with another 3­-bit vector. This produces a 3­-bit result (which is then truncated to a scalar output) rather than performing a reduction that yields a single “true” (1) or “false” (0).

For example, in Test Case 1 the test bench sets {p1a, p1b, p1c} to 111 and {p1d, p1e, p1f} to 000. The expression

  {p1a, p1b, p1c} & {p1d, p1e, p1f}

evaluates as 111 & 000 which equals 000, not 1 as expected. Why? Because you are doing a bitwise AND on 3­-bit vectors rather than a reduction that checks if an entire group is “all ones.”

To fix the problem you need to use reduction operators or combine the bits with regular ANDs. For instance, if the intended functionality is that p1y should be 1 if either group of three inputs is all ones, you can write:

  assign p1y = (&{p1a, p1b, p1c}) | (&{p1d, p1e, p1f});

Here, the reduction operator “&” reduces the 3­-bit vector to a single bit that is 1 only when all bits in the vector are 1. Alternatively, if you meant p1y to be the logical AND of the individual groups, you can write:

  assign p1y = (p1a & p1b & p1c) | (p1d & p1e & p1f);

Either change fixes the issue by correctly computing p1y as a single bit that reflects the intended logic, satisfying the test bench expectations.

🔍 Related Documents:

- source_documents\Quick Start Guide to Verilog.pdf: generate all possible input patterns to drive the DUTand especially any transitions that may cause timing
errors. Example 6.1 shows how to create a simple test bench to verify the operation of a DUT called
SystemX. The test bench does not have any inputs or outputs; thus, there are no ports declared in the
module. SystemX is then instantiated (DUT) in the test bench. Internal signals of type reg are declared to...

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\Quick Start Guide to Verilog.pdf: appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should read in a
new input pattern every 10 ns. Your test bench
should
write
the
input
pattern
and
the
corresponding output of the DUT to an external
ﬁle called “output.txt.”
6.4.2
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.2. Your
test bench read in the input patterns from an
external ﬁle called “input.txt.” This ﬁle should...

- source_documents\Quick Start Guide to Verilog.pdf: 6.1.3
Can a test bench be simulated?
6.1.4
Can a test bench be synthesized?
6.1.5
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.1. Your
test bench should drive in each input code for
the vector ABCD in the order they would
appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should use a pro-
cedural
block
and
individual
signal
assignments for each pattern. Your test bench
should change the input pattern every 10 ns.
Fig. 6.1...

- source_documents\Quick Start Guide to Verilog.pdf: The general topology and module deﬁnition for
the design are shown in Example 4.8. Design a
Verilog test bench to exhaustively verify this
design under all input conditions. Your test
bench should use two nested for loops within
a procedural block to generate all of the stimu-
lus patterns automatically. Your test bench
should change the input pattern every 30 ns
in order to give sufﬁcient time for the signals to
ripple through the adder.
100
•
Chapter 6: Test Benches...

- source_documents\Quick Start Guide to Verilog.pdf: each
input
pattern
and
then
print
either
“PASS” or “FAIL” depending on the output of
the DUT.
6.3.4
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.4. Your
test bench should drive in each input code for
the vector ABCD in the order they would
appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should change
the input pattern every 10 ns. Your test bench
should include automatic result checking for
each
input
pattern
and
then...
