The bug is in the expression that computes p1y. The code

  assign p1y = {p1a, p1b, p1c} & {p1d, p1e, p1f};

uses the bitwise AND operator on two 3‑bit vectors. This operation produces a 3‑bit vector (by ANDing each corresponding bit), but p1y is declared as a single-bit output. In the test cases the designer intends for p1y to be 1 when either the three bits {p1a, p1b, p1c} or the three bits {p1d, p1e, p1f} are all 1. For example, in Test Case 1 the left group is 111 and the right group is 000, so the bitwise AND returns 000, and p1y ends up 0. Thus, Test Case 1 complains because p1y is 0 rather than the expected 1.

The intended operation is likely to perform a reduction AND on each triplet and then combine the results. In Verilog you can use the reduction operator (&) for this purpose. One way to fix the code is to change the expression to something like:

  assign p1y = (&{p1a, p1b, p1c}) | (&{p1d, p1e, p1f});

Now:
• (&{p1a, p1b, p1c}) computes a single bit that is 1 only if p1a, p1b, and p1c are all 1,
• (&{p1d, p1e, p1f}) does the same for the second group,
• The bitwise OR (|) then sets p1y to 1 if either group is all 1.

This modification meets the test bench’s expectation.

🔍 Related Documents:

- source_documents\Quick Start Guide to Verilog.pdf: generate all possible input patterns to drive the DUTand especially any transitions that may cause timing
errors. Example 6.1 shows how to create a simple test bench to verify the operation of a DUT called
SystemX. The test bench does not have any inputs or outputs; thus, there are no ports declared in the
module. SystemX is then instantiated (DUT) in the test bench. Internal signals of type reg are declared to...

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\Quick Start Guide to Verilog.pdf: appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should read in a
new input pattern every 10 ns. Your test bench
should
write
the
input
pattern
and
the
corresponding output of the DUT to an external
ﬁle called “output.txt.”
6.4.2
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.2. Your
test bench read in the input patterns from an
external ﬁle called “input.txt.” This ﬁle should...

- source_documents\Quick Start Guide to Verilog.pdf: 6.1.3
Can a test bench be simulated?
6.1.4
Can a test bench be synthesized?
6.1.5
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.1. Your
test bench should drive in each input code for
the vector ABCD in the order they would
appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should use a pro-
cedural
block
and
individual
signal
assignments for each pattern. Your test bench
should change the input pattern every 10 ns.
Fig. 6.1...

- source_documents\Quick Start Guide to Verilog.pdf: The general topology and module deﬁnition for
the design are shown in Example 4.8. Design a
Verilog test bench to exhaustively verify this
design under all input conditions. Your test
bench should use two nested for loops within
a procedural block to generate all of the stimu-
lus patterns automatically. Your test bench
should change the input pattern every 30 ns
in order to give sufﬁcient time for the signals to
ripple through the adder.
100
•
Chapter 6: Test Benches...

- source_documents\Quick Start Guide to Verilog.pdf: each
input
pattern
and
then
print
either
“PASS” or “FAIL” depending on the output of
the DUT.
6.3.4
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.4. Your
test bench should drive in each input code for
the vector ABCD in the order they would
appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should change
the input pattern every 10 ns. Your test bench
should include automatic result checking for
each
input
pattern
and
then...
