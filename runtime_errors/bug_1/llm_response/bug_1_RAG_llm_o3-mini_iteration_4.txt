The error “p1y = 0 (Expected: 1)” occurs because the assignment

  assign p1y = {p1a, p1b, p1c} & {p1d, p1e, p1f};

is not doing what was intended. In this statement, each group of three bits is simply concatenated into a 3‐bit vector and then the bitwise AND operator (&) is applied between corresponding bits of these two vectors, yielding another 3‐bit vector. Since p1y is declared as a 1‐bit output, only one bit (typically the least significant bit) is assigned to p1y. For example, in Test Case 1 the first group is 111 and the second group is 000, and their bitwise AND is 000 so that p1y becomes 0.

The test bench, however, expects p1y to be 1 when one of the groups (either ABC or DEF) is all ones. In other words, the designer meant to check whether either group consists entirely of 1’s and then output a true (1) if so.

To fix the bug, you should reduce each concatenated vector to a single bit by using the reduction AND operator (&) and then combine the two (using OR if a “pass‐if either group is all ones” behavior is desired). For example, the corrected assignment could be written as follows:

  assign p1y = (&{p1a, p1b, p1c}) | (&{p1d, p1e, p1f});

Here's what happens with this fix:

1. (&{p1a, p1b, p1c}) performs a reduction AND on p1a, p1b, and p1c. It results in a 1 if and only if all three bits are 1.
2. Similarly, (&{p1d, p1e, p1f}) produces a 1 if and only if all bits p1d, p1e, and p1f are 1.
3. The OR (|) between these two results yields 1 if either (or both) of the groups is entirely 1’s, which is the expected behavior based on the test cases.

Thus, the root cause was the misuse of the bitwise AND operator on a multi‐bit vector instead of using the reduction operator to check if all bits in a group are 1. Changing the expression as shown fixes the error observed in the simulation.

🔍 Related Documents:

- source_documents\Quick Start Guide to Verilog.pdf: generate all possible input patterns to drive the DUTand especially any transitions that may cause timing
errors. Example 6.1 shows how to create a simple test bench to verify the operation of a DUT called
SystemX. The test bench does not have any inputs or outputs; thus, there are no ports declared in the
module. SystemX is then instantiated (DUT) in the test bench. Internal signals of type reg are declared to...

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\Quick Start Guide to Verilog.pdf: appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should read in a
new input pattern every 10 ns. Your test bench
should
write
the
input
pattern
and
the
corresponding output of the DUT to an external
ﬁle called “output.txt.”
6.4.2
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.2. Your
test bench read in the input patterns from an
external ﬁle called “input.txt.” This ﬁle should...

- source_documents\Quick Start Guide to Verilog.pdf: 6.1.3
Can a test bench be simulated?
6.1.4
Can a test bench be synthesized?
6.1.5
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.1. Your
test bench should drive in each input code for
the vector ABCD in the order they would
appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should use a pro-
cedural
block
and
individual
signal
assignments for each pattern. Your test bench
should change the input pattern every 10 ns.
Fig. 6.1...

- source_documents\Quick Start Guide to Verilog.pdf: The general topology and module deﬁnition for
the design are shown in Example 4.8. Design a
Verilog test bench to exhaustively verify this
design under all input conditions. Your test
bench should use two nested for loops within
a procedural block to generate all of the stimu-
lus patterns automatically. Your test bench
should change the input pattern every 30 ns
in order to give sufﬁcient time for the signals to
ripple through the adder.
100
•
Chapter 6: Test Benches...

- source_documents\Quick Start Guide to Verilog.pdf: each
input
pattern
and
then
print
either
“PASS” or “FAIL” depending on the output of
the DUT.
6.3.4
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.4. Your
test bench should drive in each input code for
the vector ABCD in the order they would
appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should change
the input pattern every 10 ns. Your test bench
should include automatic result checking for
each
input
pattern
and
then...
