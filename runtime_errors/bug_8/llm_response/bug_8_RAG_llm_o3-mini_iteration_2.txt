The error message

‚ÄÉ‚ÄÉ"pedControl 2 - ERROR: Expected Green (01), but got 11"

indicates that when the test bench expects the FSM to leave the Ped state (with output "11") and transition back to Green (output "01"), the design remains in the Ped state.

Here's what‚Äôs happening:

‚Ä¢ In your state transition logic, when the FSM is in the Red state it checks pedControl. If pedControl is high, it sets next to Ped. In the Ped state the code unconditionally sets next to Ped. Therefore, once the FSM enters the Ped state, it never leaves it (unless the system is reset).

‚Ä¢ The test bench sets pedControl high. After the first clock cycle, the FSM transitions from Red to Ped (output "11")‚Äîthat is expected. However, the test bench then expects that after another clock cycle the FSM should transition to Green (output "01"). Instead, the FSM is still in Ped, because its internal logic remains in that state as long as pedControl is high. That is why you see Ped‚Äôs output (11) instead of Green (01).

To fix this problem you have two choices:

1. Modify the test bench so that after the FSM transitions to Ped you deassert pedControl. For example, drive pedControl low after one clock cycle. This way, when the FSM is in Ped, the condition to remain in Ped is removed and you could design the state transition such that Ped goes to Green when pedControl is deasserted.

2. Adjust the state transition logic in your FSM. Instead of having the Ped state unconditionally stay in Ped, update the FSM‚Äôs transition logic to allow exiting the Ped state. For example, you might code it so that after a clock cycle in Ped, the FSM automatically returns to Green (or to some other defined state) regardless of pedControl, or you might use pedControl‚Äôs edge to trigger the Ped state temporarily.

The core bug is that the FSM‚Äôs Ped state is ‚Äústicky‚Äù because its next state is always Ped, and because pedControl remains asserted in the test bench, the FSM never leaves Ped. By either deasserting pedControl at the appropriate time in your test bench or modifying your state machine‚Äôs logic to allow exiting the Ped state, the simulation will eventually show the expected transition to Green (output "01").

üîç Related Documents:

- source_documents\verilog_2001_ref_guide.pdf: for (i=0; i<=255; i=i+1)
                @(negedge clk)
                  data_bus = RAM[i];
            end
    default:$display(‚Äúillegal opcode in module %m‚Äù);
  endcase
end...

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\Quick Start Guide to Verilog.pdf: The general topology and module deÔ¨Ånition for
the design are shown in Example 4.8. Design a
Verilog test bench to exhaustively verify this
design under all input conditions. Your test
bench should use two nested for loops within
a procedural block to generate all of the stimu-
lus patterns automatically. Your test bench
should change the input pattern every 30 ns
in order to give sufÔ¨Åcient time for the signals to
ripple through the adder.
100
‚Ä¢
Chapter 6: Test Benches...

- source_documents\Quick Start Guide to Verilog.pdf: case statement. Declare the module to match
the block diagram provided. Use the type wire
for the inputs and type reg for the output.
5.2.7
Design a Verilog model to implement the
behavior described by the 4-input truth table
in Fig. 5.4. Use procedural assignment and an
if-else statement. Declare the module to match
the block diagram provided. Use the type wire
for the inputs and type reg for the output. Hint:
Notice that there are far more input codes pro-...

- source_documents\Quick Start Guide to Verilog.pdf: signal_assignment_1
signal_assignment_2
:
end
Let‚Äôs look at a simple model of how an initial block is used to model the reset line in a test bench. In
the following example, the signal ‚ÄúReset_TB‚Äù is being driven into a DUT. At the beginning of the
simulation, the initial value of Reset_TB is set to a logic zero. The second assignment will take place
after a delay of 15 time units. The second assignment statement sets Reset_TB to a logic one. The...

- source_documents\verilog_2001_ref_guide.pdf: 34
   Verilog HDL Quick Reference Guide
   
15.2 Path Pulse (Glitch) Detection
A pulse is a glitch on the inputs of a module path that is less than the delay of the
path.  A special specparam constant can be used to control whether the pulse
will propagate to the output (transport delay), not propagate to the output
(inertial delay), or result in a logic X on the output.
specparam PATHPULSE$input$output = (reject_limit, error_limit); 
specparam PATHPULSE$ = (reject_limit, error_limit);...
