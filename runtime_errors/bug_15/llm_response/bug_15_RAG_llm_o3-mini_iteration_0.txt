The problem isn’t with the test bench at all—it’s with how the ring oscillator is wired. The assignment

  assign lut_ins = {lut_outs[10], lut_outs[9:0]};

connects each inverter’s input essentially to itself. To explain further, you have an array of 11 inverters whose inputs and outputs are grouped into two 11‐bit vectors (lut_ins and lut_outs). With the assignment as given, the mapping works like this:

  lut_ins[10] = lut_outs[10],
  lut_ins[9]  = lut_outs[9],
  …
  lut_ins[0]  = lut_outs[0].

In effect, every inverter “sees” its own output as its input. No true feedback loop is created because there is no “rotation” of the outputs; in a proper ring oscillator the last inverter’s output should feed back to the first inverter’s input.

Because the ring is never properly formed, the oscillator never toggles. That is why the test bench reports:

  ERROR: Ring oscillator output (OUT) never toggled. Likely feedback wiring issue.

To fix this, the wiring must “rotate” the connection so that the last inverter’s output becomes the input to the first inverter and all the other inverters shift accordingly. One correct way to do this is to change the assignment to:

  assign lut_ins = {lut_outs[9:0], lut_outs[10]};

Now, the concatenation lines up like this:

  lut_ins[10] = lut_outs[9],
  lut_ins[9]  = lut_outs[8],
  …
  lut_ins[1]  = lut_outs[0],
  lut_ins[0]  = lut_outs[10].

This rotation ensures a proper ring feedback path so that once you force the first signal (as you do in the testbench) and then release it, the inverters will create a toggling oscillation.

Thus, the bug is a wiring mistake in the feedback assignment, and the solution is to “rotate” the indices in the assignment as shown above.

🔍 Related Documents:

- source_documents\verilog_fsm.pdf: Figure 5 The circuit generated by Program 17 (this is an erroneous circuit!)
Pass
Trigger
C
A
1'b0
0
1
Latch
C
Program 18 An always@( * ) block that will not generate latches
1 wire Trigger , Pass;
2 reg A, C;
3
4 always @( * ) begin
5
A = 1’b0;
6
C = 1’b1;
7
if (Trigger) begin
8
A = Pass;
9
C = Pass;
10
end
11 end
Figure 6 The circuit generated by Program 18 (this is correct!)
Pass
Trigger
C
A
1'b0
0
1
1
0
1'b1
11...

- source_documents\Quick Start Guide to Verilog.pdf: Consider the following forever loop example that will generate a clock signal (CLK), but only when an
enable (EN) is asserted. When EN ¼ 0, the loop will disable and the simulation will end.
Example:
initial
begin
CLK ¼ 0;
forever
begin: loop_ex
if (EN ¼¼ 1)
#10 CLK ¼ ~CLK;
else
disable loop_ex; // The group name to be disabled comes after the keyword
end
end
CONCEPT CHECK
CC5.2
When using an if-else statement to model a combinational logic circuit, is using the else...

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\Quick Start Guide to Verilog.pdf: appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should read in a
new input pattern every 10 ns. Your test bench
should
write
the
input
pattern
and
the
corresponding output of the DUT to an external
ﬁle called “output.txt.”
6.4.2
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.2. Your
test bench read in the input patterns from an
external ﬁle called “input.txt.” This ﬁle should...

- source_documents\verilog_fsm.pdf: generation. If you don’t assign every element that can be assigned inside an always@( * ) block
every time that always@( * ) block is executed, a latch (similar to a register but much harder to
work with in FPGAs) will be inferred for that element. This is never what you want and is a
terrible place for bugs. As this is subtle, it is somewhat hard to visualize. Consider Program 17.
Program 17 An always@( * ) block that will generate a latch for C
1 wire Trigger , Pass;
2 reg A, C;
3...

- source_documents\RTL error analysis.pdf: clock = 1’b0; 
forever
#10   clock = ~clock;
end
Behavioural modeling...
