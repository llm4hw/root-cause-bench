The bug is in the way the feedback “ring” is wired. The assignment

  assign lut_ins = {lut_outs[10], lut_outs[9:0]};

incorrectly orders the inverters’ wiring. Because of how concatenation works in Verilog, the most-significant bit (bit 10) of lut_ins is set equal to lut_outs[10]. This causes the inverter at index 10 to take its own output as its input rather than receiving the output from the preceding inverter in the chain. As a result, the oscillator’s “ring” is broken and the output (OUT) never toggles—which is what the test bench complains about.

The intended operation is that the output of the last inverter feeds the first inverter and every inverter’s input comes from the previous inverter’s output. To fix the bug, the concatenation should be re-ordered so that the chain “rotates” correctly. For example, the assignment should be changed to:

  assign lut_ins = {lut_outs[9:0], lut_outs[10]};

With this change, the output of inverter 10 becomes the input of inverter 0 (since in the concatenation, lut_outs[10] ends up as the least significant bit), and every inverter sees the proper signal from its neighbor. This re-ordering fixes the feedback wiring issue and allows the ring oscillator to toggle as expected.

🔍 Related Documents:

- source_documents\verilog_fsm.pdf: Figure 5 The circuit generated by Program 17 (this is an erroneous circuit!)
Pass
Trigger
C
A
1'b0
0
1
Latch
C
Program 18 An always@( * ) block that will not generate latches
1 wire Trigger , Pass;
2 reg A, C;
3
4 always @( * ) begin
5
A = 1’b0;
6
C = 1’b1;
7
if (Trigger) begin
8
A = Pass;
9
C = Pass;
10
end
11 end
Figure 6 The circuit generated by Program 18 (this is correct!)
Pass
Trigger
C
A
1'b0
0
1
1
0
1'b1
11...

- source_documents\Quick Start Guide to Verilog.pdf: Consider the following forever loop example that will generate a clock signal (CLK), but only when an
enable (EN) is asserted. When EN ¼ 0, the loop will disable and the simulation will end.
Example:
initial
begin
CLK ¼ 0;
forever
begin: loop_ex
if (EN ¼¼ 1)
#10 CLK ¼ ~CLK;
else
disable loop_ex; // The group name to be disabled comes after the keyword
end
end
CONCEPT CHECK
CC5.2
When using an if-else statement to model a combinational logic circuit, is using the else...

- source_documents\verilog_fsm.pdf: case with simulation tools (like ModelSim), however. ModelSim will not correct your sensitivity
list bugs, and your simulations will be plagued with odd errors. Furthermore, the synthesis tools
catching your errors is not guarenteed. An easy way to avoid these potential problems is to use
always@( * ) as opposed to always@(Input1 or Input 2 or ...).
4. Lastly, a very subtle point which perhaps has the potential to cause the most frustration is latch...

- source_documents\Quick Start Guide to Verilog.pdf: appear in a truth table (i.e., “0000,” “0001,”
“0010,” . . .). Your test bench should read in a
new input pattern every 10 ns. Your test bench
should
write
the
input
pattern
and
the
corresponding output of the DUT to an external
ﬁle called “output.txt.”
6.4.2
Design a Verilog test bench to verify the func-
tional operation of the system in Fig. 6.2. Your
test bench read in the input patterns from an
external ﬁle called “input.txt.” This ﬁle should...

- source_documents\verilog_fsm.pdf: generation. If you don’t assign every element that can be assigned inside an always@( * ) block
every time that always@( * ) block is executed, a latch (similar to a register but much harder to
work with in FPGAs) will be inferred for that element. This is never what you want and is a
terrible place for bugs. As this is subtle, it is somewhat hard to visualize. Consider Program 17.
Program 17 An always@( * ) block that will generate a latch for C
1 wire Trigger , Pass;
2 reg A, C;
3...

- source_documents\RTL error analysis.pdf: clock = 1’b0; 
forever
#10   clock = ~clock;
end
Behavioural modeling...
