The error is not in your half‐adder or full‐adder logic per se but in the way you connected the one‐bit adders in your 4‑bit module. In your full_ad_4bit module the carry signals are mixed up. For example, look at your instantiations:

 • For bit 0 (fa1) you correctly use i_cin and output w_carry1.
 • For bit 1 (fa2) you inadvertently set i_cin to w_carry3 instead of using the carry from the previous bit.  
 • For bit 2 (fa3) you again use w_carry1 (which came from bit 0) instead of bit 1’s result.
 • For bit 3 (fa4) you use w_carry2 as the carry-in and output w_carry3.

A proper ripple carry chain requires that the carry-out of each adder be fed into the carry-in of the next adder. In other words:

 • fa1 should output a carry signal (say w_carry1) and then  
 • fa2’s carry-in should be w_carry1, producing w_carry2,  
 • fa3’s carry-in should be w_carry2, producing w_carry3, and  
 • fa4’s carry-in should be w_carry3, with its carry-out as the final o_carry.

Because your code mistakenly connects the adders out-of-order (fa2 using w_carry3 and fa3 using w_carry1), the overall sum comes out wrong. For instance, when testing 3 + 5 + 0 you expected a 5‑bit output of 01000, but you got 10010.

To fix this bug, you need to connect the adders correctly. One correct version could be:

--------------------------------------------------
module full_add_4bit(
                     i_a     ,  //input 
                     i_b     ,  //input 
                     i_cin   ,  //input 
                     o_sum   ,  //output 
                     o_carry    //output 
                     );

// Port declaration
input  [3:0] i_a, i_b;
input  i_cin;
output [3:0] o_sum;
output o_carry;
wire   w_carry1, w_carry2, w_carry3;

// Correct ripple carry configuration:
full_half_add_1bit fa1(
                      .i_a(i_a[0]),
                      .i_b(i_b[0]),
                      .i_cin(i_cin),
                      .o_sum(o_sum[0]),
                      .o_carry(w_carry1)
                      ),
                   fa2(
                      .i_a(i_a[1]),
                      .i_b(i_b[1]),
                      .i_cin(w_carry1),  // carry from fa1
                      .o_sum(o_sum[1]),
                      .o_carry(w_carry2)
                      ),
                   fa3(
                      .i_a(i_a[2]),
                      .i_b(i_b[2]),
                      .i_cin(w_carry2),  // carry from fa2
                      .o_sum(o_sum[2]),
                      .o_carry(w_carry3)
                      ),
                   fa4(
                      .i_a(i_a[3]),
                      .i_b(i_b[3]),
                      .i_cin(w_carry3),  // carry from fa3
                      .o_sum(o_sum[3]),
                      .o_carry(o_carry)
                      );

endmodule // full_add_4bit
--------------------------------------------------

This change makes sure that the output carry of one adder properly feeds into the next one. Once the ripple chain is connected in sequence, the test bench will see the expected results.

In summary:
• The bug is the misconnection of the internal carry signals in the 4‑bit adder.
• It occurs because carry outputs from one bit adder are not being fed correctly as inputs to the next.
• The fix is to rewire the instances so that fa2’s i_cin is w_carry1, fa3’s i_cin is w_carry2, and fa4’s i_cin is w_carry3, with fa4’s o_carry as the final carry output.

🔍 Related Documents:

- source_documents\Quick Start Guide to Verilog.pdf: EXAMPLE 4.5 DESIGN OF A HALF ADDER ............................................................. ............................................................. 56
EXAMPLE 4.6 DESIGN OF A FULL ADDER ............................................................. ............................................................. 57
EXAMPLE 4.7 DESIGN OF A FULL ADDER OUT OF HALF ADDERS .............................................. ............................................. 58...

- source_documents\Quick Start Guide to Verilog.pdf: 11.3.4
Add the functionality to the computer model
from 11.3.3 the ability to perform the addition
instruction ADD_AB. Test your addition instruc-
tion by simulating the following program. The
ﬁrst addition instruction will perform x“FE” +
x“01”
¼
x“FF”
and
assert
the
negative
(N) ﬂag. The second addition instruction will
perform x“01” + x“FF” ¼ x“00” and assert the
carry (C) and zero (Z) ﬂags. The third addition
instruction will perform x“7F” + x“7F” ¼ x“FE”...

- source_documents\Quick Start Guide to Verilog.pdf: parallel to each other; thus, the delay through the half adder is due to only one level of logic.
Example 4.5
Design of a half adder
4.2.2 Full Adders
A full adder is a circuit that still produces a sum and carry out, but considers three inputs in the
computations (A, B, and Cin). Example 4.6 shows the design of a full adder using the classical design
56
•
Chapter 4: Structural Design and Hierarchy...

- source_documents\Quick Start Guide to Verilog.pdf: Example 4.9
Structural model of a full adder using two half adders
Example 4.10 shows the structural model of a 4-bit ripple carry adder in Verilog. The RCA is created
by instantiating four full adders. Notice that a logic 1’b0 can be directly inserted into the port map of the
ﬁrst full adder to model the behavior of C0 ¼ 0.
60
•
Chapter 4: Structural Design and Hierarchy...

- source_documents\Quick Start Guide to Verilog.pdf: The ability to implement the carry out logic using the expression Cout ¼ AB + (A  B)Cin allows us to
implement a full adder with two half adders and the addition of a single OR gate. Example 4.7 shows this
approach. In this new conﬁguration, the sum is produced in two levels of logic while the carry out is
produced in three levels of logic.
Example 4.7
Design of a full adder out of half adders
4.2.3 Ripple Carry Adder (RCA)...

- source_documents\Quick Start Guide to Verilog.pdf: always @ (A, B, ALU_Sel)
begin
case (ALU_Sel)
3’b000
: begin //-- Addition
//-- Sum and Carry Flag
{NZVC[0], Result} ¼ A + B;
//-- Negative Flag
NZVC[3] ¼ Result[7];
//-- Zero Flag
if (Result ¼¼ 0)
NZVC[2] ¼ 1;
else
NZVC[2] ¼ 0;
//-- Two’s Comp Overflow Flag
if ( ((A[7]¼¼0) && (B[7]¼¼0) && (Result[7] ¼¼ 1)) ||
((A[7]¼¼1) && (B[7]¼¼1) && (Result[7] ¼¼ 0)) )
NZVC[1] ¼ 1;
else
NZVC[1] ¼ 0;
end
:
//-- other ALU operations go here...
:
default
: begin
Result ¼ 8’hXX;
NZVC
¼ 4’hX;
end
endcase
end...
