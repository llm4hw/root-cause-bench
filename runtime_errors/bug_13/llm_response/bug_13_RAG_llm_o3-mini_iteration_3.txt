The error isn’t in the half‑adder or the addition algorithm itself—it’s due to mis‐wiring of the “chain” between the full adders. In a proper 4‑bit ripple‑carry adder, the carry output of each stage must feed into the carry input of the next stage.

Looking at the code:

• fa1 (the least significant bit) is set up correctly:
  • i_cin is passed as the carry‐in,
  • Its carry-out goes to w_carry1.

• However, fa2 is instantiated with:
  • i_cin(w_carry3)
  • o_carry(w_carry2)
  This is incorrect because it should take the carry-out from fa1—not from w_carry3!

• Then, fa3 uses:
  • i_cin(w_carry1)
  • o_carry(o_carry)
  Again, this should instead take the carry-out coming from fa2.

• Finally, fa4 is instantiated with:
  • i_cin(w_carry2)
  • o_carry(w_carry3)
  This one almost “closes” the chain, but then w_carry3 is (incorrectly) routed back to fa2 in the chain.

Because of these mix-ups, when you add numbers like 3 (0011) and 5 (0101) the fan‑out and the carry propagation are not what’s expected. Thus the testbench, which checks for {cout, sum} = 01000 (for 8), sees an incorrect value (10010) due to the wrong ordering of the carry signals.

To fix the problem, connect the full adders in proper ripple‑carry order. For instance, you should have:
 • fa1: 
   .i_cin(i_cin)
   .o_carry(w_carry1)
 • fa2: 
   .i_cin(w_carry1)  // instead of w_carry3
   .o_carry(w_carry2)
 • fa3: 
   .i_cin(w_carry2)  // instead of w_carry1
   .o_carry(w_carry3)
 • fa4: 
   .i_cin(w_carry3)  // instead of w_carry2
   .o_carry(o_carry)

With these connections, the carries are chained correctly and the final sum (and carry-out) will match the expected addition.

🔍 Related Documents:

- source_documents\Quick Start Guide to Verilog.pdf: EXAMPLE 4.5 DESIGN OF A HALF ADDER ............................................................. ............................................................. 56
EXAMPLE 4.6 DESIGN OF A FULL ADDER ............................................................. ............................................................. 57
EXAMPLE 4.7 DESIGN OF A FULL ADDER OUT OF HALF ADDERS .............................................. ............................................. 58...

- source_documents\Quick Start Guide to Verilog.pdf: 11.3.4
Add the functionality to the computer model
from 11.3.3 the ability to perform the addition
instruction ADD_AB. Test your addition instruc-
tion by simulating the following program. The
ﬁrst addition instruction will perform x“FE” +
x“01”
¼
x“FF”
and
assert
the
negative
(N) ﬂag. The second addition instruction will
perform x“01” + x“FF” ¼ x“00” and assert the
carry (C) and zero (Z) ﬂags. The third addition
instruction will perform x“7F” + x“7F” ¼ x“FE”...

- source_documents\Quick Start Guide to Verilog.pdf: parallel to each other; thus, the delay through the half adder is due to only one level of logic.
Example 4.5
Design of a half adder
4.2.2 Full Adders
A full adder is a circuit that still produces a sum and carry out, but considers three inputs in the
computations (A, B, and Cin). Example 4.6 shows the design of a full adder using the classical design
56
•
Chapter 4: Structural Design and Hierarchy...

- source_documents\Quick Start Guide to Verilog.pdf: Example 4.9
Structural model of a full adder using two half adders
Example 4.10 shows the structural model of a 4-bit ripple carry adder in Verilog. The RCA is created
by instantiating four full adders. Notice that a logic 1’b0 can be directly inserted into the port map of the
ﬁrst full adder to model the behavior of C0 ¼ 0.
60
•
Chapter 4: Structural Design and Hierarchy...

- source_documents\Quick Start Guide to Verilog.pdf: The ability to implement the carry out logic using the expression Cout ¼ AB + (A  B)Cin allows us to
implement a full adder with two half adders and the addition of a single OR gate. Example 4.7 shows this
approach. In this new conﬁguration, the sum is produced in two levels of logic while the carry out is
produced in three levels of logic.
Example 4.7
Design of a full adder out of half adders
4.2.3 Ripple Carry Adder (RCA)...

- source_documents\Quick Start Guide to Verilog.pdf: always @ (A, B, ALU_Sel)
begin
case (ALU_Sel)
3’b000
: begin //-- Addition
//-- Sum and Carry Flag
{NZVC[0], Result} ¼ A + B;
//-- Negative Flag
NZVC[3] ¼ Result[7];
//-- Zero Flag
if (Result ¼¼ 0)
NZVC[2] ¼ 1;
else
NZVC[2] ¼ 0;
//-- Two’s Comp Overflow Flag
if ( ((A[7]¼¼0) && (B[7]¼¼0) && (Result[7] ¼¼ 1)) ||
((A[7]¼¼1) && (B[7]¼¼1) && (Result[7] ¼¼ 0)) )
NZVC[1] ¼ 1;
else
NZVC[1] ¼ 0;
end
:
//-- other ALU operations go here...
:
default
: begin
Result ¼ 8’hXX;
NZVC
¼ 4’hX;
end
endcase
end...
